{"backend_state":"running","connection_file":"/projects/df816efc-8285-4471-bb81-0077d1554410/.local/share/jupyter/runtime/kernel-0fc333fc-7c36-4475-bd71-dbc808db4716.json","kernel":"crashcourse","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.7"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1651474952517,"exec_count":1,"id":"0e3723","input":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Displays plots directly in the Jupyter frontend cells\n%matplotlib inline\n\n# Allows splitting of datasets\nfrom sklearn.model_selection import train_test_split\n\n# StandardScaler scales by subtracting mean and dividing by standard deviation\n# MinMaxScaler scales by subtracting minimum from feature value and divides by range \nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\n# Encodes categories by assigning unique category a value\nfrom sklearn.preprocessing import OrdinalEncoder \n\n# LinearSVC generates a linear support vector classifier\n# SVC allows us to choose from a variety of non-linear kernels \nfrom sklearn.svm import LinearSVC, SVC \n\n\nfrom sklearn.metrics import accuracy_score","kernel":"crashcourse","pos":2,"start":1651474950795,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474952560,"exec_count":2,"id":"b9e12f","input":"auto_mpg_df = pd.read_csv('Car details v3.csv')","kernel":"crashcourse","pos":3,"start":1651474952537,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474952571,"exec_count":3,"id":"b4a731","input":"auto_mpg_df = auto_mpg_df.drop(['torque'], axis = 1)","kernel":"crashcourse","pos":4,"start":1651474952564,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474952606,"exec_count":4,"id":"bd6d17","input":"auto_mpg_df.head()","kernel":"crashcourse","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>year</th>\n      <th>selling_price</th>\n      <th>km_driven</th>\n      <th>fuel</th>\n      <th>seller_type</th>\n      <th>transmission</th>\n      <th>owner</th>\n      <th>mileage</th>\n      <th>engine</th>\n      <th>max_power</th>\n      <th>seats</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Maruti Swift Dzire VDI</td>\n      <td>2014</td>\n      <td>450000</td>\n      <td>145500</td>\n      <td>Diesel</td>\n      <td>Individual</td>\n      <td>Manual</td>\n      <td>First Owner</td>\n      <td>23.4 kmpl</td>\n      <td>1248 CC</td>\n      <td>74 bhp</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Skoda Rapid 1.5 TDI Ambition</td>\n      <td>2014</td>\n      <td>370000</td>\n      <td>120000</td>\n      <td>Diesel</td>\n      <td>Individual</td>\n      <td>Manual</td>\n      <td>Second Owner</td>\n      <td>21.14 kmpl</td>\n      <td>1498 CC</td>\n      <td>103.52 bhp</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Honda City 2017-2020 EXi</td>\n      <td>2006</td>\n      <td>158000</td>\n      <td>140000</td>\n      <td>Petrol</td>\n      <td>Individual</td>\n      <td>Manual</td>\n      <td>Third Owner</td>\n      <td>17.7 kmpl</td>\n      <td>1497 CC</td>\n      <td>78 bhp</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Hyundai i20 Sportz Diesel</td>\n      <td>2010</td>\n      <td>225000</td>\n      <td>127000</td>\n      <td>Diesel</td>\n      <td>Individual</td>\n      <td>Manual</td>\n      <td>First Owner</td>\n      <td>23.0 kmpl</td>\n      <td>1396 CC</td>\n      <td>90 bhp</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Maruti Swift VXI BSIII</td>\n      <td>2007</td>\n      <td>130000</td>\n      <td>120000</td>\n      <td>Petrol</td>\n      <td>Individual</td>\n      <td>Manual</td>\n      <td>First Owner</td>\n      <td>16.1 kmpl</td>\n      <td>1298 CC</td>\n      <td>88.2 bhp</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                           name  year  selling_price  km_driven    fuel  \\\n0        Maruti Swift Dzire VDI  2014         450000     145500  Diesel   \n1  Skoda Rapid 1.5 TDI Ambition  2014         370000     120000  Diesel   \n2      Honda City 2017-2020 EXi  2006         158000     140000  Petrol   \n3     Hyundai i20 Sportz Diesel  2010         225000     127000  Diesel   \n4        Maruti Swift VXI BSIII  2007         130000     120000  Petrol   \n\n  seller_type transmission         owner     mileage   engine   max_power  \\\n0  Individual       Manual   First Owner   23.4 kmpl  1248 CC      74 bhp   \n1  Individual       Manual  Second Owner  21.14 kmpl  1498 CC  103.52 bhp   \n2  Individual       Manual   Third Owner   17.7 kmpl  1497 CC      78 bhp   \n3  Individual       Manual   First Owner   23.0 kmpl  1396 CC      90 bhp   \n4  Individual       Manual   First Owner   16.1 kmpl  1298 CC    88.2 bhp   \n\n   seats  \n0    5.0  \n1    5.0  \n2    5.0  \n3    5.0  \n4    5.0  "},"exec_count":4}},"pos":5,"scrolled":true,"start":1651474952578,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474952636,"exec_count":5,"id":"3cffbb","input":"auto_mpg_df.isnull().sum() ","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"name               0\nyear               0\nselling_price      0\nkm_driven          0\nfuel               0\nseller_type        0\ntransmission       0\nowner              0\nmileage          221\nengine           221\nmax_power        215\nseats            221\ndtype: int64"},"exec_count":5}},"pos":8,"start":1651474952624,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474952685,"exec_count":6,"id":"4e0adf","input":"#As we can see from above, there are missing values in the 'mileage', 'engine', 'max_power', and 'seats' columns of our data.\n#On seeing the number of null values in the dataset which is approximately 2%, I decided to drop the rows with null values as the number of such rows is very small and will not affect the analysis.\nauto_mpg_df = auto_mpg_df.dropna()","kernel":"crashcourse","pos":9,"start":1651474952680,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474952708,"exec_count":7,"id":"68849a","input":"auto_mpg_df.isnull().sum()","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"name             0\nyear             0\nselling_price    0\nkm_driven        0\nfuel             0\nseller_type      0\ntransmission     0\nowner            0\nmileage          0\nengine           0\nmax_power        0\nseats            0\ndtype: int64"},"exec_count":7}},"pos":10,"start":1651474952690,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474952730,"exec_count":8,"id":"7b7748","input":"auto_mpg_df['engine'].unique()","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"array(['1248 CC', '1498 CC', '1497 CC', '1396 CC', '1298 CC', '1197 CC',\n       '1061 CC', '796 CC', '1364 CC', '1399 CC', '1461 CC', '993 CC',\n       '1198 CC', '1199 CC', '998 CC', '1591 CC', '2179 CC', '1368 CC',\n       '2982 CC', '2494 CC', '2143 CC', '2477 CC', '1462 CC', '2755 CC',\n       '1968 CC', '1798 CC', '1196 CC', '1373 CC', '1598 CC', '1998 CC',\n       '1086 CC', '1194 CC', '1172 CC', '1405 CC', '1582 CC', '999 CC',\n       '2487 CC', '1999 CC', '3604 CC', '2987 CC', '1995 CC', '1451 CC',\n       '1969 CC', '2967 CC', '2497 CC', '1797 CC', '1991 CC', '2362 CC',\n       '1493 CC', '1599 CC', '1341 CC', '1794 CC', '799 CC', '1193 CC',\n       '2696 CC', '1495 CC', '1186 CC', '1047 CC', '2498 CC', '2956 CC',\n       '2523 CC', '1120 CC', '624 CC', '1496 CC', '1984 CC', '2354 CC',\n       '814 CC', '793 CC', '1799 CC', '936 CC', '1956 CC', '1997 CC',\n       '1499 CC', '1948 CC', '2997 CC', '2489 CC', '2499 CC', '2609 CC',\n       '2953 CC', '1150 CC', '1994 CC', '1388 CC', '1527 CC', '2199 CC',\n       '995 CC', '2993 CC', '1586 CC', '1390 CC', '909 CC', '2393 CC',\n       '3198 CC', '1339 CC', '2835 CC', '2092 CC', '1595 CC', '2496 CC',\n       '1596 CC', '1597 CC', '2596 CC', '2148 CC', '1299 CC', '1590 CC',\n       '2231 CC', '2694 CC', '2200 CC', '1795 CC', '1896 CC', '1796 CC',\n       '1422 CC', '1489 CC', '2359 CC', '2197 CC', '2999 CC', '1781 CC',\n       '2650 CC', '1343 CC', '2446 CC', '3498 CC', '2198 CC', '2776 CC',\n       '1950 CC'], dtype=object)"},"exec_count":8}},"pos":13,"start":1651474952713,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474952762,"exec_count":9,"id":"921964","input":"#The features engine, max_power and mileage have units in the dataset. In the real world if we have such datasets, we generally remove the units from each feature. After doing so, convert the datatype of these columns to float. For example: 1248 CC engine is 1248, 23.4 kmpl is 23.4 and so on.\n\nauto_mpg_df['engine'] = auto_mpg_df['engine'].str.replace('CC', '')\nauto_mpg_df['engine'] = auto_mpg_df['engine'].str.replace(' ', '')\nauto_mpg_df['engine'].unique()","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"array(['1248', '1498', '1497', '1396', '1298', '1197', '1061', '796',\n       '1364', '1399', '1461', '993', '1198', '1199', '998', '1591',\n       '2179', '1368', '2982', '2494', '2143', '2477', '1462', '2755',\n       '1968', '1798', '1196', '1373', '1598', '1998', '1086', '1194',\n       '1172', '1405', '1582', '999', '2487', '1999', '3604', '2987',\n       '1995', '1451', '1969', '2967', '2497', '1797', '1991', '2362',\n       '1493', '1599', '1341', '1794', '799', '1193', '2696', '1495',\n       '1186', '1047', '2498', '2956', '2523', '1120', '624', '1496',\n       '1984', '2354', '814', '793', '1799', '936', '1956', '1997',\n       '1499', '1948', '2997', '2489', '2499', '2609', '2953', '1150',\n       '1994', '1388', '1527', '2199', '995', '2993', '1586', '1390',\n       '909', '2393', '3198', '1339', '2835', '2092', '1595', '2496',\n       '1596', '1597', '2596', '2148', '1299', '1590', '2231', '2694',\n       '2200', '1795', '1896', '1796', '1422', '1489', '2359', '2197',\n       '2999', '1781', '2650', '1343', '2446', '3498', '2198', '2776',\n       '1950'], dtype=object)"},"exec_count":9}},"pos":14,"start":1651474952737,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474952773,"exec_count":10,"id":"f1d287","input":"auto_mpg_df['engine'] = auto_mpg_df['engine'].astype(float, errors = 'raise')","kernel":"crashcourse","pos":15,"start":1651474952769,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474952858,"exec_count":11,"id":"c018a0","input":"auto_mpg_df['max_power'].unique()","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"array(['74 bhp', '103.52 bhp', '78 bhp', '90 bhp', '88.2 bhp',\n       '81.86 bhp', '57.5 bhp', '37 bhp', '67.1 bhp', '68.1 bhp',\n       '108.45 bhp', '60 bhp', '73.9 bhp', '67 bhp', '82 bhp', '88.5 bhp',\n       '46.3 bhp', '88.73 bhp', '64.1 bhp', '98.6 bhp', '88.8 bhp',\n       '83.81 bhp', '83.1 bhp', '47.3 bhp', '73.8 bhp', '34.2 bhp',\n       '35 bhp', '81.83 bhp', '40.3 bhp', '121.3 bhp', '138.03 bhp',\n       '160.77 bhp', '117.3 bhp', '116.3 bhp', '83.14 bhp', '67.05 bhp',\n       '168.5 bhp', '100 bhp', '120.7 bhp', '98.63 bhp', '175.56 bhp',\n       '103.25 bhp', '171.5 bhp', '100.6 bhp', '174.33 bhp', '187.74 bhp',\n       '170 bhp', '78.9 bhp', '88.76 bhp', '86.8 bhp', '108.495 bhp',\n       '108.62 bhp', '93.7 bhp', '103.6 bhp', '98.59 bhp', '189 bhp',\n       '67.04 bhp', '68.05 bhp', '58.2 bhp', '82.85 bhp', '81.80 bhp',\n       '73 bhp', '120 bhp', '94.68 bhp', '160 bhp', '65 bhp', '155 bhp',\n       '69.01 bhp', '126.32 bhp', '138.1 bhp', '83.8 bhp', '126.2 bhp',\n       '98.96 bhp', '62.1 bhp', '86.7 bhp', '188 bhp', '214.56 bhp',\n       '177 bhp', '280 bhp', '148.31 bhp', '254.79 bhp', '190 bhp',\n       '177.46 bhp', '204 bhp', '141 bhp', '117.6 bhp', '241.4 bhp',\n       '282 bhp', '150 bhp', '147.5 bhp', '108.5 bhp', '103.5 bhp',\n       '183 bhp', '181.04 bhp', '157.7 bhp', '164.7 bhp', '91.1 bhp',\n       '400 bhp', '68 bhp', '75 bhp', '85.8 bhp', '87.2 bhp', '53 bhp',\n       '118 bhp', '103.2 bhp', '83 bhp', '84 bhp', '58.16 bhp',\n       '147.94 bhp', '74.02 bhp', '53.3 bhp', '80 bhp', '88.7 bhp',\n       '97.7 bhp', '121.36 bhp', '162 bhp', '140 bhp', '94 bhp',\n       '100.57 bhp', '82.9 bhp', '83.11 bhp', '70 bhp', '153.86 bhp',\n       '121 bhp', '126.3 bhp', '73.97 bhp', '171 bhp', '69 bhp',\n       '99.6 bhp', '102 bhp', '105 bhp', '63 bhp', '79.4 bhp', '97.9 bhp',\n       '63.1 bhp', '66.1 bhp', '110 bhp', '174.5 bhp', '53.26 bhp',\n       '73.75 bhp', '67.06 bhp', '64.08 bhp', '37.5 bhp', '189.3 bhp',\n       '158.8 bhp', '61.7 bhp', '55.2 bhp', '71.01 bhp', '73.74 bhp',\n       '147.9 bhp', '71 bhp', '77 bhp', '121.4 bhp', '113.4 bhp',\n       '47 bhp', '130 bhp', '57.6 bhp', '138 bhp', '52.8 bhp',\n       '53.64 bhp', '53.5 bhp', '76.8 bhp', '82.4 bhp', '113.42 bhp',\n       '76 bhp', '84.8 bhp', '56.3 bhp', '218 bhp', '112 bhp', '92 bhp',\n       '105.5 bhp', '169 bhp', '95 bhp', '72.4 bhp', '115 bhp', '152 bhp',\n       '91.2 bhp', '156 bhp', '74.9 bhp', '62 bhp', '105.3 bhp',\n       '73.94 bhp', '85.80 bhp', '85 bhp', '118.3 bhp', '72 bhp',\n       '147.51 bhp', '58 bhp', '64 bhp', '126.24 bhp', '76.9 bhp',\n       '194.3 bhp', '99.23 bhp', '89.84 bhp', '123.7 bhp', '118.35 bhp',\n       '99 bhp', '241 bhp', '136 bhp', '261.4 bhp', '104.68 bhp',\n       '37.48 bhp', '104 bhp', '88.50 bhp', '63.12 bhp', '91.7 bhp',\n       '102.5 bhp', '177.6 bhp', '45 bhp', '123.37 bhp', '147.8 bhp',\n       '184 bhp', '84.48 bhp', '68.07 bhp', '74.96 bhp', '167.6 bhp',\n       '152.87 bhp', '112.2 bhp', '83.83 bhp', '197 bhp', '110.4 bhp',\n       '104.55 bhp', '103 bhp', '103.3 bhp', '66 bhp', '108.6 bhp',\n       '165 bhp', '163.7 bhp', '116.9 bhp', '94.93 bhp', '127 bhp',\n       '198.5 bhp', '179.5 bhp', '120.69 bhp', '121.31 bhp', '138.08 bhp',\n       '187.7 bhp', '80.8 bhp', '86.79 bhp', '93.87 bhp', '116.6 bhp',\n       '143 bhp', '92.7 bhp', '88 bhp', '58.33 bhp', '78.8 bhp',\n       '64.4 bhp', '125 bhp', '139.01 bhp', '254.8 bhp', '181 bhp',\n       '258 bhp', '55.23 bhp', '270.9 bhp', '265 bhp', '157.75 bhp',\n       '101 bhp', '186 bhp', '187.4 bhp', '224 bhp', '64.9 bhp',\n       '148 bhp', '35.5 bhp', '89.75 bhp', '32.8 bhp', '91.72 bhp',\n       '106 bhp', '98.97 bhp', '66.6 bhp', '86 bhp', '65.3 bhp',\n       '98.82 bhp', '198.25 bhp', '38 bhp', '142 bhp', '132 bhp',\n       '174.57 bhp', '178 bhp', '163.2 bhp', '203.2 bhp', '177.5 bhp',\n       '175 bhp', '57 bhp', '80.84 bhp', '68.4 bhp', '167.67 bhp',\n       '170.63 bhp', '52 bhp', '149.5 bhp', '48.21 bhp', ' bhp',\n       '201.1 bhp', '100.5 bhp', '144 bhp', '194.4 bhp', '168.7 bhp',\n       '104.5 bhp', '103.26 bhp', '116.4 bhp', '98.79 bhp', '80.9 bhp',\n       '58.3 bhp', '272 bhp', '235 bhp', '167.62 bhp', '170.30 bhp',\n       '139.46 bhp', '158 bhp', '110.5 bhp', '82.5 bhp', '141.1 bhp',\n       '38.4 bhp', '197.2 bhp', '161 bhp', '194 bhp', '122.4 bhp',\n       '134.10 bhp', '60.2 bhp', '134 bhp', '203 bhp', '135.1 bhp'],\n      dtype=object)"},"exec_count":11}},"pos":16,"start":1651474952780,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474952959,"exec_count":12,"id":"9e095a","input":"#On printing the distinct values in the 'max_power' column we notice that the only units that exist in this column are 'bhp' so we will replace them and convert column to float. An extra thing to do, we have to drop rows with just 'bhp' as they will cause an error while converting to float.\n\nauto_mpg_df['max_power'] = auto_mpg_df['max_power'].str.replace('bhp', '')\nauto_mpg_df['max_power'] = auto_mpg_df['max_power'].str.replace(' ', '')\nauto_mpg_df['max_power'].unique()","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"array(['74', '103.52', '78', '90', '88.2', '81.86', '57.5', '37', '67.1',\n       '68.1', '108.45', '60', '73.9', '67', '82', '88.5', '46.3',\n       '88.73', '64.1', '98.6', '88.8', '83.81', '83.1', '47.3', '73.8',\n       '34.2', '35', '81.83', '40.3', '121.3', '138.03', '160.77',\n       '117.3', '116.3', '83.14', '67.05', '168.5', '100', '120.7',\n       '98.63', '175.56', '103.25', '171.5', '100.6', '174.33', '187.74',\n       '170', '78.9', '88.76', '86.8', '108.495', '108.62', '93.7',\n       '103.6', '98.59', '189', '67.04', '68.05', '58.2', '82.85',\n       '81.80', '73', '120', '94.68', '160', '65', '155', '69.01',\n       '126.32', '138.1', '83.8', '126.2', '98.96', '62.1', '86.7', '188',\n       '214.56', '177', '280', '148.31', '254.79', '190', '177.46', '204',\n       '141', '117.6', '241.4', '282', '150', '147.5', '108.5', '103.5',\n       '183', '181.04', '157.7', '164.7', '91.1', '400', '68', '75',\n       '85.8', '87.2', '53', '118', '103.2', '83', '84', '58.16',\n       '147.94', '74.02', '53.3', '80', '88.7', '97.7', '121.36', '162',\n       '140', '94', '100.57', '82.9', '83.11', '70', '153.86', '121',\n       '126.3', '73.97', '171', '69', '99.6', '102', '105', '63', '79.4',\n       '97.9', '63.1', '66.1', '110', '174.5', '53.26', '73.75', '67.06',\n       '64.08', '37.5', '189.3', '158.8', '61.7', '55.2', '71.01',\n       '73.74', '147.9', '71', '77', '121.4', '113.4', '47', '130',\n       '57.6', '138', '52.8', '53.64', '53.5', '76.8', '82.4', '113.42',\n       '76', '84.8', '56.3', '218', '112', '92', '105.5', '169', '95',\n       '72.4', '115', '152', '91.2', '156', '74.9', '62', '105.3',\n       '73.94', '85.80', '85', '118.3', '72', '147.51', '58', '64',\n       '126.24', '76.9', '194.3', '99.23', '89.84', '123.7', '118.35',\n       '99', '241', '136', '261.4', '104.68', '37.48', '104', '88.50',\n       '63.12', '91.7', '102.5', '177.6', '45', '123.37', '147.8', '184',\n       '84.48', '68.07', '74.96', '167.6', '152.87', '112.2', '83.83',\n       '197', '110.4', '104.55', '103', '103.3', '66', '108.6', '165',\n       '163.7', '116.9', '94.93', '127', '198.5', '179.5', '120.69',\n       '121.31', '138.08', '187.7', '80.8', '86.79', '93.87', '116.6',\n       '143', '92.7', '88', '58.33', '78.8', '64.4', '125', '139.01',\n       '254.8', '181', '258', '55.23', '270.9', '265', '157.75', '101',\n       '186', '187.4', '224', '64.9', '148', '35.5', '89.75', '32.8',\n       '91.72', '106', '98.97', '66.6', '86', '65.3', '98.82', '198.25',\n       '38', '142', '132', '174.57', '178', '163.2', '203.2', '177.5',\n       '175', '57', '80.84', '68.4', '167.67', '170.63', '52', '149.5',\n       '48.21', '', '201.1', '100.5', '144', '194.4', '168.7', '104.5',\n       '103.26', '116.4', '98.79', '80.9', '58.3', '272', '235', '167.62',\n       '170.30', '139.46', '158', '110.5', '82.5', '141.1', '38.4',\n       '197.2', '161', '194', '122.4', '134.10', '60.2', '134', '203',\n       '135.1'], dtype=object)"},"exec_count":12}},"pos":17,"start":1651474952897,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474953025,"exec_count":13,"id":"aafb33","input":"auto_mpg_df['max_power'] = auto_mpg_df['max_power'].replace(r'^s*$', float('NaN'), regex = True)","kernel":"crashcourse","pos":18,"start":1651474952981,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474953052,"exec_count":14,"id":"9b44fd","input":"auto_mpg_df['max_power'].isnull().sum()","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"1"},"exec_count":14}},"pos":19,"start":1651474953045,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474953089,"exec_count":15,"id":"b44ed8","input":"auto_mpg_df = auto_mpg_df.dropna()","kernel":"crashcourse","pos":20,"start":1651474953071,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474953126,"exec_count":16,"id":"58e446","input":"auto_mpg_df['max_power'].isnull().sum()","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"0"},"exec_count":16}},"pos":21,"start":1651474953111,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474953170,"exec_count":17,"id":"77f824","input":"auto_mpg_df['max_power'] = auto_mpg_df['max_power'].astype(float, errors = 'raise')","kernel":"crashcourse","pos":22,"start":1651474953167,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474953223,"exec_count":18,"id":"7a0af7","input":"auto_mpg_df['mileage'].unique()","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"array(['23.4 kmpl', '21.14 kmpl', '17.7 kmpl', '23.0 kmpl', '16.1 kmpl',\n       '20.14 kmpl', '17.3 km/kg', '23.59 kmpl', '20.0 kmpl',\n       '19.01 kmpl', '17.3 kmpl', '19.3 kmpl', '18.9 kmpl', '18.15 kmpl',\n       '24.52 kmpl', '19.7 kmpl', '22.54 kmpl', '21.0 kmpl', '25.5 kmpl',\n       '26.59 kmpl', '21.5 kmpl', '20.3 kmpl', '21.4 kmpl', '24.7 kmpl',\n       '18.2 kmpl', '16.8 kmpl', '24.3 kmpl', '14.0 kmpl', '18.6 kmpl',\n       '33.44 km/kg', '23.95 kmpl', '17.0 kmpl', '20.63 kmpl',\n       '13.93 kmpl', '16.0 kmpl', '17.8 kmpl', '18.5 kmpl', '12.55 kmpl',\n       '12.99 kmpl', '14.8 kmpl', '13.5 kmpl', '26.0 kmpl', '20.65 kmpl',\n       '27.3 kmpl', '11.36 kmpl', '17.68 kmpl', '14.28 kmpl',\n       '18.53 kmpl', '14.84 kmpl', '21.12 kmpl', '20.36 kmpl',\n       '21.27 kmpl', '18.16 kmpl', '22.0 kmpl', '25.1 kmpl', '20.51 kmpl',\n       '21.66 kmpl', '25.2 kmpl', '22.9 kmpl', '16.02 kmpl', '20.54 kmpl',\n       '22.77 kmpl', '15.71 kmpl', '23.1 kmpl', '19.02 kmpl',\n       '19.81 kmpl', '26.2 km/kg', '16.47 kmpl', '15.04 kmpl',\n       '19.1 kmpl', '21.79 kmpl', '18.8 kmpl', '21.21 kmpl', '15.37 kmpl',\n       '11.79 kmpl', '19.0 kmpl', '14.3 kmpl', '15.8 kmpl', '15.1 kmpl',\n       '19.09 kmpl', '22.32 kmpl', '21.9 kmpl', '14.53 kmpl',\n       '21.63 kmpl', '20.85 kmpl', '20.45 kmpl', '19.67 kmpl',\n       '23.01 kmpl', '20.77 kmpl', '17.92 kmpl', '17.01 kmpl',\n       '22.37 kmpl', '19.33 kmpl', '9.5 kmpl', '12.83 kmpl', '22.48 kmpl',\n       '16.78 kmpl', '14.67 kmpl', '15.0 kmpl', '13.96 kmpl', '18.0 kmpl',\n       '12.07 kmpl', '26.21 kmpl', '10.8 kmpl', '16.3 kmpl', '13.6 kmpl',\n       '14.74 kmpl', '15.6 kmpl', '19.56 kmpl', '22.69 kmpl',\n       '19.16 kmpl', '18.12 kmpl', '12.1 kmpl', '17.5 kmpl', '42.0 kmpl',\n       '20.4 kmpl', '21.1 kmpl', '19.44 kmpl', '13.0 kmpl', '21.43 kmpl',\n       '22.95 kmpl', '16.2 kmpl', '15.3 kmpl', '28.09 kmpl', '17.4 kmpl',\n       '19.4 kmpl', '26.6 km/kg', '17.6 kmpl', '28.4 kmpl', '14.1 kmpl',\n       '25.17 kmpl', '22.74 kmpl', '17.57 kmpl', '16.95 kmpl',\n       '19.49 kmpl', '17.21 kmpl', '13.2 kmpl', '14.2 kmpl', '26.8 kmpl',\n       '25.4 kmpl', '11.5 kmpl', '27.28 kmpl', '17.97 kmpl', '12.8 kmpl',\n       '16.55 kmpl', '12.05 kmpl', '14.07 kmpl', '21.02 kmpl',\n       '11.57 kmpl', '17.9 kmpl', '15.96 kmpl', '17.1 kmpl', '17.19 kmpl',\n       '21.01 kmpl', '24.0 kmpl', '25.6 kmpl', '21.38 kmpl', '23.84 kmpl',\n       '23.08 kmpl', '14.24 kmpl', '20.71 kmpl', '15.64 kmpl',\n       '14.5 kmpl', '16.34 kmpl', '27.39 kmpl', '11.1 kmpl', '13.9 kmpl',\n       '20.88 km/kg', '20.92 kmpl', '23.8 kmpl', '24.4 kmpl',\n       '15.29 kmpl', '21.19 kmpl', '22.5 kmpl', '19.6 kmpl', '23.65 kmpl',\n       '25.32 kmpl', '23.5 kmpl', '16.6 kmpl', '23.9 kmpl', '20.8 kmpl',\n       '27.62 kmpl', '12.9 kmpl', '25.44 kmpl', '17.88 kmpl', '22.7 kmpl',\n       '17.2 kmpl', '15.42 kmpl', '19.68 kmpl', '18.7 kmpl', '15.4 kmpl',\n       '19.34 kmpl', '22.71 kmpl', '25.8 kmpl', '13.7 kmpl', '12.2 kmpl',\n       '18.49 kmpl', '9.0 kmpl', '0.0 kmpl', '13.58 kmpl', '10.1 kmpl',\n       '20.5 kmpl', '25.0 kmpl', '10.5 kmpl', '22.07 kmpl', '22.3 kmpl',\n       '15.26 kmpl', '20.62 kmpl', '27.4 kmpl', '23.2 kmpl', '14.4 kmpl',\n       '18.4 kmpl', '30.46 km/kg', '14.02 kmpl', '11.0 kmpl', '20.6 kmpl',\n       '22.05 kmpl', '20.2 kmpl', '18.1 kmpl', '22.1 kmpl', '19.87 kmpl',\n       '13.01 kmpl', '18.06 kmpl', '26.1 kmpl', '16.52 kmpl',\n       '13.55 kmpl', '24.2 kmpl', '25.83 kmpl', '11.2 kmpl', '17.09 kmpl',\n       '21.03 kmpl', '17.45 kmpl', '21.64 kmpl', '21.94 km/kg',\n       '13.87 kmpl', '19.98 kmpl', '20.52 kmpl', '23.57 kmpl',\n       '11.7 kmpl', '17.43 kmpl', '18.88 kmpl', '13.68 kmpl',\n       '11.18 kmpl', '20.89 kmpl', '11.8 kmpl', '19.62 kmpl', '21.7 kmpl',\n       '14.9 kmpl', '19.5 kmpl', '10.91 kmpl', '15.7 kmpl', '20.73 kmpl',\n       '15.85 kmpl', '20.7 kmpl', '14.23 kmpl', '16.5 kmpl', '17.36 kmpl',\n       '12.6 kmpl', '16.36 kmpl', '14.95 kmpl', '16.9 kmpl', '19.2 kmpl',\n       '16.96 kmpl', '22.15 kmpl', '18.78 kmpl', '19.61 kmpl',\n       '17.71 kmpl', '18.3 kmpl', '19.12 kmpl', '19.72 kmpl', '12.0 kmpl',\n       '11.4 kmpl', '23.03 kmpl', '11.07 kmpl', '15.9 kmpl', '17.67 kmpl',\n       '20.46 kmpl', '13.1 kmpl', '13.45 km/kg', '24.8 kmpl',\n       '15.73 kmpl', '15.11 kmpl', '12.7 kmpl', '21.2 kmpl', '20.38 kmpl',\n       '21.56 kmpl', '13.22 kmpl', '14.49 kmpl', '15.05 kmpl',\n       '23.26 kmpl', '15.41 kmpl', '13.8 kmpl', '22.27 kmpl',\n       '32.52 km/kg', '14.66 kmpl', '12.12 kmpl', '16.84 kmpl',\n       '14.09 kmpl', '14.7 kmpl', '13.4 kmpl', '15.5 kmpl', '13.49 kmpl',\n       '11.88 km/kg', '14.6 kmpl', '10.75 kmpl', '24.5 kmpl',\n       '11.74 kmpl', '16.07 kmpl', '15.63 kmpl', '26.3 km/kg',\n       '23.7 km/kg', '25.47 kmpl', '17.05 kmpl', '23.3 kmpl', '11.9 kmpl',\n       '13.38 kmpl', '20.86 kmpl', '19.2 km/kg', '10.9 kmpl',\n       '18.25 kmpl', '15.2 kmpl', '20.37 kmpl', '17.8 km/kg', '21.8 kmpl',\n       '11.96 kmpl', '24.04 kmpl', '19.69 kmpl', '13.73 kmpl',\n       '21.04 kmpl', '25.01 kmpl', '10.93 kmpl', '10.9 km/kg',\n       '24.29 kmpl', '13.44 kmpl', '20.07 kmpl', '21.1 km/kg',\n       '19.08 kmpl', '20.34 kmpl', '11.68 kmpl', '12.5 kmpl', '12.3 kmpl',\n       '23.87 kmpl', '16.38 kmpl', '17.42 kmpl', '10.0 kmpl',\n       '18.24 kmpl', '10.71 kmpl', '19.59 kmpl', '16.7 kmpl',\n       '19.83 kmpl', '21.76 kmpl', '16.05 kmpl', '20.28 kmpl',\n       '16.25 kmpl', '16.73 kmpl', '18.48 kmpl', '13.2 km/kg',\n       '21.4 km/kg', '14.99 kmpl', '18.76 kmpl', '16.4 kmpl',\n       '19.64 kmpl', '14.94 kmpl', '16.6 km/kg', '16.0 km/kg',\n       '17.11 kmpl', '22.8 km/kg', '32.26 km/kg', '33.0 km/kg',\n       '12.4 kmpl', '18.44 kmpl', '16.09 kmpl', '19.0 km/kg',\n       '12.62 kmpl', '21.13 kmpl', '15.17 kmpl', '21.73 kmpl',\n       '21.72 kmpl', '12.85 kmpl', '14.81 kmpl', '13.24 kmpl',\n       '14.4 km/kg', '21.49 kmpl', '14.62 kmpl', '26.83 km/kg',\n       '11.45 kmpl', '12.08 kmpl', '15.74 kmpl', '11.3 kmpl',\n       '15.1 km/kg', '14.21 kmpl', '11.72 kmpl', '16.51 kmpl'],\n      dtype=object)"},"exec_count":18}},"pos":23,"start":1651474953219,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474953325,"exec_count":19,"id":"ab78dd","input":"auto_mpg_df['mileage'] = auto_mpg_df['mileage'].str.replace('kmpl', '')\nauto_mpg_df['mileage'] = auto_mpg_df['mileage'].str.replace('km/kg', '')\nauto_mpg_df['mileage'] = auto_mpg_df['mileage'].str.replace(' ', '')\nauto_mpg_df['mileage'].unique()","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"array(['23.4', '21.14', '17.7', '23.0', '16.1', '20.14', '17.3', '23.59',\n       '20.0', '19.01', '19.3', '18.9', '18.15', '24.52', '19.7', '22.54',\n       '21.0', '25.5', '26.59', '21.5', '20.3', '21.4', '24.7', '18.2',\n       '16.8', '24.3', '14.0', '18.6', '33.44', '23.95', '17.0', '20.63',\n       '13.93', '16.0', '17.8', '18.5', '12.55', '12.99', '14.8', '13.5',\n       '26.0', '20.65', '27.3', '11.36', '17.68', '14.28', '18.53',\n       '14.84', '21.12', '20.36', '21.27', '18.16', '22.0', '25.1',\n       '20.51', '21.66', '25.2', '22.9', '16.02', '20.54', '22.77',\n       '15.71', '23.1', '19.02', '19.81', '26.2', '16.47', '15.04',\n       '19.1', '21.79', '18.8', '21.21', '15.37', '11.79', '19.0', '14.3',\n       '15.8', '15.1', '19.09', '22.32', '21.9', '14.53', '21.63',\n       '20.85', '20.45', '19.67', '23.01', '20.77', '17.92', '17.01',\n       '22.37', '19.33', '9.5', '12.83', '22.48', '16.78', '14.67',\n       '15.0', '13.96', '18.0', '12.07', '26.21', '10.8', '16.3', '13.6',\n       '14.74', '15.6', '19.56', '22.69', '19.16', '18.12', '12.1',\n       '17.5', '42.0', '20.4', '21.1', '19.44', '13.0', '21.43', '22.95',\n       '16.2', '15.3', '28.09', '17.4', '19.4', '26.6', '17.6', '28.4',\n       '14.1', '25.17', '22.74', '17.57', '16.95', '19.49', '17.21',\n       '13.2', '14.2', '26.8', '25.4', '11.5', '27.28', '17.97', '12.8',\n       '16.55', '12.05', '14.07', '21.02', '11.57', '17.9', '15.96',\n       '17.1', '17.19', '21.01', '24.0', '25.6', '21.38', '23.84',\n       '23.08', '14.24', '20.71', '15.64', '14.5', '16.34', '27.39',\n       '11.1', '13.9', '20.88', '20.92', '23.8', '24.4', '15.29', '21.19',\n       '22.5', '19.6', '23.65', '25.32', '23.5', '16.6', '23.9', '20.8',\n       '27.62', '12.9', '25.44', '17.88', '22.7', '17.2', '15.42',\n       '19.68', '18.7', '15.4', '19.34', '22.71', '25.8', '13.7', '12.2',\n       '18.49', '9.0', '0.0', '13.58', '10.1', '20.5', '25.0', '10.5',\n       '22.07', '22.3', '15.26', '20.62', '27.4', '23.2', '14.4', '18.4',\n       '30.46', '14.02', '11.0', '20.6', '22.05', '20.2', '18.1', '22.1',\n       '19.87', '13.01', '18.06', '26.1', '16.52', '13.55', '24.2',\n       '25.83', '11.2', '17.09', '21.03', '17.45', '21.64', '21.94',\n       '13.87', '19.98', '20.52', '23.57', '11.7', '17.43', '18.88',\n       '13.68', '11.18', '20.89', '11.8', '19.62', '21.7', '14.9', '19.5',\n       '10.91', '15.7', '20.73', '15.85', '20.7', '14.23', '16.5',\n       '17.36', '12.6', '16.36', '14.95', '16.9', '19.2', '16.96',\n       '22.15', '18.78', '19.61', '17.71', '18.3', '19.12', '19.72',\n       '12.0', '11.4', '23.03', '11.07', '15.9', '17.67', '20.46', '13.1',\n       '13.45', '24.8', '15.73', '15.11', '12.7', '21.2', '20.38',\n       '21.56', '13.22', '14.49', '15.05', '23.26', '15.41', '13.8',\n       '22.27', '32.52', '14.66', '12.12', '16.84', '14.09', '14.7',\n       '13.4', '15.5', '13.49', '11.88', '14.6', '10.75', '24.5', '11.74',\n       '16.07', '15.63', '26.3', '23.7', '25.47', '17.05', '23.3', '11.9',\n       '13.38', '20.86', '10.9', '18.25', '15.2', '20.37', '21.8',\n       '11.96', '24.04', '19.69', '13.73', '21.04', '25.01', '10.93',\n       '24.29', '13.44', '20.07', '19.08', '20.34', '11.68', '12.5',\n       '12.3', '23.87', '16.38', '17.42', '10.0', '18.24', '10.71',\n       '19.59', '16.7', '19.83', '21.76', '16.05', '20.28', '16.25',\n       '16.73', '18.48', '14.99', '18.76', '16.4', '19.64', '14.94',\n       '17.11', '22.8', '32.26', '33.0', '12.4', '18.44', '16.09',\n       '12.62', '21.13', '15.17', '21.73', '21.72', '12.85', '14.81',\n       '13.24', '21.49', '14.62', '26.83', '11.45', '12.08', '15.74',\n       '11.3', '14.21', '11.72', '16.51'], dtype=object)"},"exec_count":19}},"pos":24,"start":1651474953241,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474953372,"exec_count":20,"id":"1f8e44","input":"auto_mpg_df['mileage'] = auto_mpg_df['mileage'].astype(float, errors = 'raise')","kernel":"crashcourse","pos":25,"start":1651474953343,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474953424,"exec_count":21,"id":"4e0e33","input":"auto_mpg_df['mileage'].unique()","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"array([23.4 , 21.14, 17.7 , 23.  , 16.1 , 20.14, 17.3 , 23.59, 20.  ,\n       19.01, 19.3 , 18.9 , 18.15, 24.52, 19.7 , 22.54, 21.  , 25.5 ,\n       26.59, 21.5 , 20.3 , 21.4 , 24.7 , 18.2 , 16.8 , 24.3 , 14.  ,\n       18.6 , 33.44, 23.95, 17.  , 20.63, 13.93, 16.  , 17.8 , 18.5 ,\n       12.55, 12.99, 14.8 , 13.5 , 26.  , 20.65, 27.3 , 11.36, 17.68,\n       14.28, 18.53, 14.84, 21.12, 20.36, 21.27, 18.16, 22.  , 25.1 ,\n       20.51, 21.66, 25.2 , 22.9 , 16.02, 20.54, 22.77, 15.71, 23.1 ,\n       19.02, 19.81, 26.2 , 16.47, 15.04, 19.1 , 21.79, 18.8 , 21.21,\n       15.37, 11.79, 19.  , 14.3 , 15.8 , 15.1 , 19.09, 22.32, 21.9 ,\n       14.53, 21.63, 20.85, 20.45, 19.67, 23.01, 20.77, 17.92, 17.01,\n       22.37, 19.33,  9.5 , 12.83, 22.48, 16.78, 14.67, 15.  , 13.96,\n       18.  , 12.07, 26.21, 10.8 , 16.3 , 13.6 , 14.74, 15.6 , 19.56,\n       22.69, 19.16, 18.12, 12.1 , 17.5 , 42.  , 20.4 , 21.1 , 19.44,\n       13.  , 21.43, 22.95, 16.2 , 15.3 , 28.09, 17.4 , 19.4 , 26.6 ,\n       17.6 , 28.4 , 14.1 , 25.17, 22.74, 17.57, 16.95, 19.49, 17.21,\n       13.2 , 14.2 , 26.8 , 25.4 , 11.5 , 27.28, 17.97, 12.8 , 16.55,\n       12.05, 14.07, 21.02, 11.57, 17.9 , 15.96, 17.1 , 17.19, 21.01,\n       24.  , 25.6 , 21.38, 23.84, 23.08, 14.24, 20.71, 15.64, 14.5 ,\n       16.34, 27.39, 11.1 , 13.9 , 20.88, 20.92, 23.8 , 24.4 , 15.29,\n       21.19, 22.5 , 19.6 , 23.65, 25.32, 23.5 , 16.6 , 23.9 , 20.8 ,\n       27.62, 12.9 , 25.44, 17.88, 22.7 , 17.2 , 15.42, 19.68, 18.7 ,\n       15.4 , 19.34, 22.71, 25.8 , 13.7 , 12.2 , 18.49,  9.  ,  0.  ,\n       13.58, 10.1 , 20.5 , 25.  , 10.5 , 22.07, 22.3 , 15.26, 20.62,\n       27.4 , 23.2 , 14.4 , 18.4 , 30.46, 14.02, 11.  , 20.6 , 22.05,\n       20.2 , 18.1 , 22.1 , 19.87, 13.01, 18.06, 26.1 , 16.52, 13.55,\n       24.2 , 25.83, 11.2 , 17.09, 21.03, 17.45, 21.64, 21.94, 13.87,\n       19.98, 20.52, 23.57, 11.7 , 17.43, 18.88, 13.68, 11.18, 20.89,\n       11.8 , 19.62, 21.7 , 14.9 , 19.5 , 10.91, 15.7 , 20.73, 15.85,\n       20.7 , 14.23, 16.5 , 17.36, 12.6 , 16.36, 14.95, 16.9 , 19.2 ,\n       16.96, 22.15, 18.78, 19.61, 17.71, 18.3 , 19.12, 19.72, 12.  ,\n       11.4 , 23.03, 11.07, 15.9 , 17.67, 20.46, 13.1 , 13.45, 24.8 ,\n       15.73, 15.11, 12.7 , 21.2 , 20.38, 21.56, 13.22, 14.49, 15.05,\n       23.26, 15.41, 13.8 , 22.27, 32.52, 14.66, 12.12, 16.84, 14.09,\n       14.7 , 13.4 , 15.5 , 13.49, 11.88, 14.6 , 10.75, 24.5 , 11.74,\n       16.07, 15.63, 26.3 , 23.7 , 25.47, 17.05, 23.3 , 11.9 , 13.38,\n       20.86, 10.9 , 18.25, 15.2 , 20.37, 21.8 , 11.96, 24.04, 19.69,\n       13.73, 21.04, 25.01, 10.93, 24.29, 13.44, 20.07, 19.08, 20.34,\n       11.68, 12.5 , 12.3 , 23.87, 16.38, 17.42, 10.  , 18.24, 10.71,\n       19.59, 16.7 , 19.83, 21.76, 16.05, 20.28, 16.25, 16.73, 18.48,\n       14.99, 18.76, 16.4 , 19.64, 14.94, 17.11, 22.8 , 32.26, 33.  ,\n       12.4 , 18.44, 16.09, 12.62, 21.13, 15.17, 21.73, 21.72, 12.85,\n       14.81, 13.24, 21.49, 14.62, 26.83, 11.45, 12.08, 15.74, 11.3 ,\n       14.21, 11.72, 16.51])"},"exec_count":21}},"pos":26,"start":1651474953406,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474953514,"exec_count":22,"id":"0d240a","input":"auto_mpg_df.info()","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 7906 entries, 0 to 8127\nData columns (total 12 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   name           7906 non-null   object \n 1   year           7906 non-null   int64  \n 2   selling_price  7906 non-null   int64  \n 3   km_driven      7906 non-null   int64  \n 4   fuel           7906 non-null   object \n 5   seller_type    7906 non-null   object \n 6   transmission   7906 non-null   object \n 7   owner          7906 non-null   object \n 8   mileage        7906 non-null   float64\n 9   engine         7906 non-null   float64\n 10  max_power      7906 non-null   float64\n 11  seats          7906 non-null   float64\ndtypes: float64(4), int64(3), object(5)\nmemory usage: 803.0+ KB\n"}},"pos":29,"start":1651474953453,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474953551,"exec_count":23,"id":"7c4cce","input":"auto_mpg_X = auto_mpg_df.drop(columns=['selling_price'])\nauto_mpg_y = auto_mpg_df['selling_price']","kernel":"crashcourse","pos":30,"start":1651474953549,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474953710,"exec_count":24,"id":"2c956a","input":"auto_mpg_y.describe().apply(lambda x: '%.5f' % x)","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"count        7906.00000\nmean       649813.72084\nstd        813582.74835\nmin         29999.00000\n25%        270000.00000\n50%        450000.00000\n75%        690000.00000\nmax      10000000.00000\nName: selling_price, dtype: object"},"exec_count":24}},"pos":31,"start":1651474953560,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474953751,"exec_count":25,"id":"624a0f","input":"#Plotting the distribution of the label (selling_price) using a histogram of different Binwidths","kernel":"crashcourse","pos":34,"start":1651474953724,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474956465,"exec_count":26,"id":"74b5b2","input":"\nbin_widths = [5, 10, 15, 20 ,25, 50, 100]\nfor i in bin_widths:\n    bin_range = np.linspace(20000, 100000, i)\n    plt.hist(auto_mpg_y, bins=bin_range, color = \"lightpink\")\n    plt.xlabel(\"Selling Price\")\n    plt.ylabel(\"Frequency\")\n    plt.show()\n    plt.figure(figsize=(4,4))","kernel":"crashcourse","output":{"0":{"data":{"image/png":"b4c89ed62b94ab63ffa0343a9ba6c93bbe49cac4","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}},"1":{"data":{"image/png":"f45b282c9afb86fcad253cf15ad178b41c2213cd","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"}},"2":{"data":{"image/png":"2017918c6181302d02ba490659d99bf1aef4d568","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"}},"3":{"data":{"image/png":"2f736533843e25b9744c5ea5b0e8aaa125086e63","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"}},"4":{"data":{"image/png":"b41c17e9500c689c0e54f0f3b0ab924367f888a0","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"}},"5":{"data":{"image/png":"d428b4befce07d4f105d0b3803b4a3af659700b4","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"}},"6":{"data":{"image/png":"2cec2dff8e98fa9ede9bf3aab967043dd3a97fd7","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"}},"7":{"data":{"text/plain":"<Figure size 288x288 with 0 Axes>"}}},"pos":35,"start":1651474953760,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957006,"exec_count":27,"id":"97f121","input":"import plotly.express as px\nfig = px.histogram(auto_mpg_df, x=\"selling_price\", nbins=75, marginal = 'box', color_discrete_sequence = ['#00CC96'])\n\nfig.update_layout(\n    title=\"Histogram of Selling Price\",\n    title_x=0.5,\n    yaxis_title=\"Frequency\",\n    xaxis_title=\"Selling Price\",\n)\nfig.update_layout(height=1000, width=1000)\nfig.show()\nfig.write_html(\"Histogram_of_Selling_Price\")","kernel":"crashcourse","output":{"0":{"data":{"iframe":"2a0e7f405f7151ae3db8e59bfdc828e9a2795dd0"}}},"pos":37,"start":1651474956474,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957027,"exec_count":28,"id":"5ae502","input":"#Plotting the relationships between the label-Selling Price and the continuous features (Mileage, km driven, engine, max power) using a small multiple of scatter plots.","kernel":"crashcourse","pos":39,"start":1651474957012,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957038,"exec_count":29,"id":"1cb478","input":"# fig, (ax1, ax2, ax3, ax4) = plt.subplots(4, figsize = (10, 10))\n# ax1.scatter(auto_mpg_y, auto_mpg_X['mileage'], color = \"lightblue\")\n# ax1.set_title(\"Selling Price vs Mileage\")\n# ax1.set(ylabel = \"Mileage\")\n# ax1.set(xlabel = \"Selling Price\")\n\n# ax2.scatter(auto_mpg_y, auto_mpg_X['km_driven'], color = \"green\")\n# ax2.set_title(\"Selling Price vs Km Driven\")\n# ax2.set(ylabel = \"Km Driven\")\n# ax2.set(xlabel = \"Selling Price\")\n\n# ax3.scatter(auto_mpg_y, auto_mpg_X['engine'], color = \"red\")\n# ax3.set_title(\"Selling Price vs Engine\")\n# ax3.set(ylabel = \"Engine\")\n# ax3.set(xlabel = \"Selling Price\")\n\n# ax4.scatter(auto_mpg_y, auto_mpg_X['max_power'], color = \"blue\")\n# ax4.set_title(\"Selling Price vs Max Power\")\n# ax4.set(ylabel = \"Max Power\")\n# ax4.set(xlabel = \"Selling Price\")\n\n# fig.tight_layout()\n# plt.show()","kernel":"crashcourse","pos":40,"start":1651474957035,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957145,"exec_count":30,"id":"0ca472","input":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport math\n\nfig = make_subplots(rows=4, cols=1)\n\nrows = ['mileage', 'km_driven', 'engine', 'max_power']\n\nrow_name = ['Mileage', 'Km Driven', 'Engine', 'Max Power']\n\nfor i in range(1, 5):\n  row = rows[i - 1]\n  fig.add_trace(\n      go.Scatter(x = auto_mpg_y, y = auto_mpg_X[row], mode=\"markers\", name = row_name[i-1]),\n      row=i, col=1,\n  )\n  fig['layout']['xaxis' + str(i)]['title']='Selling Price'\n  fig['layout']['yaxis' + str(i)]['title']= row_name[i-1]\n  \nfig.update_layout(height=1000, width=1000, title = \"Selling Price vs Numerical Features\", title_x = 0.5)\nfig.show()\n# fig.write_html(\"selling_price_vs_numerical_features_scatterplot.html\")","kernel":"crashcourse","output":{"0":{"data":{"iframe":"bbf5789e18766893a840cbc41981e1764e01476e"}}},"pos":41,"start":1651474957044,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957160,"exec_count":31,"id":"280952","input":"# We can observe that there are just a few outliers in each relationship. Furthermore, it can be seen that the data is very dense on the left side and the skewness cannot be concluded since there is a very dense mass of plots","kernel":"crashcourse","pos":43,"start":1651474957159,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957169,"exec_count":32,"id":"54679d","input":"#Plotting the relationships between the label-Selling Price and the discrete features (fuel type, Seller type, transmission) using a small multiple of box plots.\n","kernel":"crashcourse","pos":44,"start":1651474957168,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957185,"exec_count":33,"id":"a8db53","input":"# fig, axs = plt.subplots(2, 2, figsize = (10, 10))\n# sns.boxplot(ax = axs[0,0], x = \"fuel\", y = auto_mpg_y, data = auto_mpg_X, palette = \"Set3\")\n# axs[0,0].set_title(\"Selling Price vs Fuel Type\")\n# axs[0,0].set(ylabel = \"Fuel Type\")\n# axs[0,0].set(xlabel = \"Selling Price\")\n\n# sns.boxplot(ax = axs[0,1], x = \"seller_type\", y = auto_mpg_y, data = auto_mpg_X, palette = \"RdPu\")\n# axs[0,1].set_title(\"Selling Price vs Seller Type\")\n# axs[0,1].set(ylabel = \"Seller Type\")\n# axs[0,1].set(xlabel = \"Selling Price\")\n\n# sns.boxplot(ax = axs[1,0], x = \"transmission\", y = auto_mpg_y, data = auto_mpg_X, palette = \"RdPu\")\n# axs[1,0].set_title(\"Selling Price vs Transmission\")\n# axs[1,0].set(ylabel = \"Transmission\")\n# axs[1,0].set(xlabel = \"Selling Price\")\n\n# sns.boxplot(ax = axs[1,1], x = \"owner\", y = auto_mpg_y, data = auto_mpg_X, palette = \"Set3\")\n# axs[1,1].set_title(\"Selling Price vs Owner Type\")\n# axs[1,1].set(ylabel = \"Owner Type\")\n# axs[1,1].set(xlabel = \"Selling Price\")\n\n# fig.tight_layout()\n# plt.show()","kernel":"crashcourse","pos":45,"start":1651474957183,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957420,"exec_count":34,"id":"a7ecb0","input":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nfig = make_subplots(rows=2, cols=2)\n\nrows = ['fuel', 'seller_type', 'transmission', 'owner']\n\nrow_name = ['Fuel Type', 'Seller Type', 'Transmission', 'Owner Type']\n\nfor i in range(4):\n  row = rows[i]\n  fig.add_trace(\n      go.Box(y = auto_mpg_df['selling_price'], x = auto_mpg_df[row], name = row_name[i]), row = math.floor(i/2) + 1, col = i%2 + 1)\n  fig['layout']['xaxis' + str(i+1)]['title']='Selling Price'\n  fig['layout']['yaxis' + str(i+1)]['title']= row_name[i]\n  \nfig.update_layout(height=1000, width=1000, title = \"Selling Price vs Categorical Features\", title_x = 0.5)\n\nfig.show()\nfig.write_html(\"boxplot_selling_price_vs_categorical_features.html\")","kernel":"crashcourse","output":{"0":{"data":{"iframe":"fe09a69cf95db819da082f32c5faa24525e73ac5"}}},"pos":46,"start":1651474957198,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957438,"exec_count":35,"id":"164814","input":"# #Plotting the relationships between the features using a heatmap.\n# plt.figure(figsize=(10,10))\n# sns.heatmap(auto_mpg_X.corr(),cmap=plt.cm.Reds,annot=True)\n# plt.title('Heatmap displaying the relationship betweennthe features of the data',\n#          fontsize=13)\n# plt.show()","kernel":"crashcourse","pos":48,"start":1651474957426,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957496,"exec_count":36,"id":"f2b397","input":"import plotly.express as px\ndata=auto_mpg_X.corr()\nfig = px.imshow(data)\nfig.update_xaxes(side=\"bottom\", tickangle=90)\n\nfig.layout.height = 1000\nfig.layout.width = 1000\nfig.update_layout(title = \"Correlation of Features \", title_x = 0.5)\nfig.show()\n# fig.write_html(\"heatmap_correlation_of_features.html\")","kernel":"crashcourse","output":{"0":{"data":{"iframe":"2ea076d4959fc6192e9a3255aa6ef809d42f6c50"}}},"pos":49,"start":1651474957443,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957531,"exec_count":37,"id":"792cb0","input":"fig.write_html(\"heatmap.html\")","kernel":"crashcourse","pos":51,"start":1651474957503,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957551,"exec_count":38,"id":"d38ed5","input":"#Conculsions from Visualizations:-\n# 1) linear regression is a good model to try since we are predicting a continuous dependent variable from a number of independent variables. We can assume y is alinear combination of x.\n\n# 2) Seeing the histogram, we can see the data is approximately normal with the right number of bins as the data is 50% on the right and left of them mean which ticks off our normality condition.\n\n# 3) Seeing the scatterplots, I can say that the spread of data is very similar for all numerical variables which is a good indicator of homoscedasticity.\n\n# 4) I plotted the independent variables aginst each other and saw that the variables do not seem to be highly correlated and will not cause an issue of multicollinearity which satisfies our independence assumption.\n\n# 5) One important point to note is that visualizations cannot strongly indicate anything, only once we test our model we can conclude if it is god or not.","kernel":"crashcourse","pos":52,"start":1651474957546,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957581,"exec_count":39,"id":"d524ca","input":"auto_mpg_X['year'] =  2020 - auto_mpg_X['year']","kernel":"crashcourse","pos":55,"start":1651474957557,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957615,"exec_count":40,"id":"9d5dcf","input":"#dropping the car name as it is irrelevant.\nauto_mpg_X.drop(['name'],axis = 1,inplace=True)\n\n#check out the dataset with new changes\nauto_mpg_X.head()","kernel":"crashcourse","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>km_driven</th>\n      <th>fuel</th>\n      <th>seller_type</th>\n      <th>transmission</th>\n      <th>owner</th>\n      <th>mileage</th>\n      <th>engine</th>\n      <th>max_power</th>\n      <th>seats</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6</td>\n      <td>145500</td>\n      <td>Diesel</td>\n      <td>Individual</td>\n      <td>Manual</td>\n      <td>First Owner</td>\n      <td>23.40</td>\n      <td>1248.0</td>\n      <td>74.00</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6</td>\n      <td>120000</td>\n      <td>Diesel</td>\n      <td>Individual</td>\n      <td>Manual</td>\n      <td>Second Owner</td>\n      <td>21.14</td>\n      <td>1498.0</td>\n      <td>103.52</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>14</td>\n      <td>140000</td>\n      <td>Petrol</td>\n      <td>Individual</td>\n      <td>Manual</td>\n      <td>Third Owner</td>\n      <td>17.70</td>\n      <td>1497.0</td>\n      <td>78.00</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10</td>\n      <td>127000</td>\n      <td>Diesel</td>\n      <td>Individual</td>\n      <td>Manual</td>\n      <td>First Owner</td>\n      <td>23.00</td>\n      <td>1396.0</td>\n      <td>90.00</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13</td>\n      <td>120000</td>\n      <td>Petrol</td>\n      <td>Individual</td>\n      <td>Manual</td>\n      <td>First Owner</td>\n      <td>16.10</td>\n      <td>1298.0</td>\n      <td>88.20</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   year  km_driven    fuel seller_type transmission         owner  mileage  \\\n0     6     145500  Diesel  Individual       Manual   First Owner    23.40   \n1     6     120000  Diesel  Individual       Manual  Second Owner    21.14   \n2    14     140000  Petrol  Individual       Manual   Third Owner    17.70   \n3    10     127000  Diesel  Individual       Manual   First Owner    23.00   \n4    13     120000  Petrol  Individual       Manual   First Owner    16.10   \n\n   engine  max_power  seats  \n0  1248.0      74.00    5.0  \n1  1498.0     103.52    5.0  \n2  1497.0      78.00    5.0  \n3  1396.0      90.00    5.0  \n4  1298.0      88.20    5.0  "},"exec_count":40}},"pos":56,"start":1651474957591,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957654,"exec_count":41,"id":"b20323","input":"categorical_cols = ['fuel', 'seller_type', 'transmission', 'owner']\nfor column in categorical_cols:\n    \n    tempdf = pd.get_dummies(auto_mpg_X[column], prefix=column)\n    \n    auto_mpg_X = pd.merge(\n        left = auto_mpg_X,\n        right = tempdf,\n        left_index = True,\n        right_index = True,\n    )\n    \n    auto_mpg_X = auto_mpg_X.drop(columns=column)","kernel":"crashcourse","pos":59,"start":1651474957629,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957707,"exec_count":42,"id":"ba1226","input":"auto_mpg_X.head()","kernel":"crashcourse","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>km_driven</th>\n      <th>mileage</th>\n      <th>engine</th>\n      <th>max_power</th>\n      <th>seats</th>\n      <th>fuel_CNG</th>\n      <th>fuel_Diesel</th>\n      <th>fuel_LPG</th>\n      <th>fuel_Petrol</th>\n      <th>seller_type_Dealer</th>\n      <th>seller_type_Individual</th>\n      <th>seller_type_Trustmark Dealer</th>\n      <th>transmission_Automatic</th>\n      <th>transmission_Manual</th>\n      <th>owner_First Owner</th>\n      <th>owner_Fourth &amp; Above Owner</th>\n      <th>owner_Second Owner</th>\n      <th>owner_Test Drive Car</th>\n      <th>owner_Third Owner</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6</td>\n      <td>145500</td>\n      <td>23.40</td>\n      <td>1248.0</td>\n      <td>74.00</td>\n      <td>5.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6</td>\n      <td>120000</td>\n      <td>21.14</td>\n      <td>1498.0</td>\n      <td>103.52</td>\n      <td>5.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>14</td>\n      <td>140000</td>\n      <td>17.70</td>\n      <td>1497.0</td>\n      <td>78.00</td>\n      <td>5.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10</td>\n      <td>127000</td>\n      <td>23.00</td>\n      <td>1396.0</td>\n      <td>90.00</td>\n      <td>5.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13</td>\n      <td>120000</td>\n      <td>16.10</td>\n      <td>1298.0</td>\n      <td>88.20</td>\n      <td>5.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   year  km_driven  mileage  engine  max_power  seats  fuel_CNG  fuel_Diesel  \\\n0     6     145500    23.40  1248.0      74.00    5.0         0            1   \n1     6     120000    21.14  1498.0     103.52    5.0         0            1   \n2    14     140000    17.70  1497.0      78.00    5.0         0            0   \n3    10     127000    23.00  1396.0      90.00    5.0         0            1   \n4    13     120000    16.10  1298.0      88.20    5.0         0            0   \n\n   fuel_LPG  fuel_Petrol  seller_type_Dealer  seller_type_Individual  \\\n0         0            0                   0                       1   \n1         0            0                   0                       1   \n2         0            1                   0                       1   \n3         0            0                   0                       1   \n4         0            1                   0                       1   \n\n   seller_type_Trustmark Dealer  transmission_Automatic  transmission_Manual  \\\n0                             0                       0                    1   \n1                             0                       0                    1   \n2                             0                       0                    1   \n3                             0                       0                    1   \n4                             0                       0                    1   \n\n   owner_First Owner  owner_Fourth & Above Owner  owner_Second Owner  \\\n0                  1                           0                   0   \n1                  0                           0                   1   \n2                  0                           0                   0   \n3                  1                           0                   0   \n4                  1                           0                   0   \n\n   owner_Test Drive Car  owner_Third Owner  \n0                     0                  0  \n1                     0                  0  \n2                     0                  1  \n3                     0                  0  \n4                     0                  0  "},"exec_count":42}},"pos":60,"start":1651474957666,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957738,"exec_count":43,"id":"99613a","input":"X_train, X_test, y_train, y_test = train_test_split(auto_mpg_X, auto_mpg_y, test_size = 0.2)\n#X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = 0.25)\n\nprint(\"X Train Shape: \" + str(X_train.shape))\nprint(\"X Test Shape: \" + str(X_test.shape))\n#print(\"X Validation Shape: \" + str(X_val.shape))\nprint(\"Y Train Shape: \" + str(y_train.shape))\nprint(\"Y Test Shape: \" + str(y_test.shape))\n#print(\"Y Validation Shape: \" + str(y_val.shape))","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"X Train Shape: (6324, 20)\nX Test Shape: (1582, 20)\nY Train Shape: (6324,)\nY Test Shape: (1582,)\n"}},"pos":63,"start":1651474957723,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957768,"exec_count":44,"id":"c76534","input":"# Choosing to scale the one hot encoded columns as well as they have been shown to improve performance in some cases\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\n#X_val_scaled = scaler.transform(X_val)\nX_test_scaled = scaler.transform(X_test)\nprint(X_train_scaled[0])","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"[ 1.03743781  0.90886964 -1.60433339  2.06978292  0.0988563   2.73923621\n -0.07775075  0.92001269 -0.06668784 -0.90084145 -0.4070802   0.4560953\n -0.17599686 -0.39110437  0.39110437 -1.39925144 -0.14315651  1.71255243\n -0.02812942 -0.25915567]\n"}},"pos":66,"start":1651474957750,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957785,"exec_count":45,"id":"8112e7","input":"ones_vector = np.ones((6324,1))\nX_train_scaled = np.c_[X_train_scaled, ones_vector]\nX_train_scaled.shape","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"(6324, 21)"},"exec_count":45}},"pos":67,"start":1651474957782,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957800,"exec_count":46,"id":"980ca8","input":"# ones_vector2 = np.ones((1581,1))\n# X_val_scaled = np.c_[X_val_scaled, ones_vector2]\n# X_val_scaled.shape","kernel":"crashcourse","pos":68,"start":1651474957796,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957818,"exec_count":47,"id":"ced4b5","input":"ones_vector3 = np.ones((1582,1))\nX_test_scaled = np.c_[X_test_scaled, ones_vector3]\nX_test_scaled.shape","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"(1582, 21)"},"exec_count":47}},"pos":69,"start":1651474957813,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957836,"exec_count":48,"id":"aefa08","input":"y_train.shape","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"(6324,)"},"exec_count":48}},"pos":70,"start":1651474957835,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957848,"exec_count":49,"id":"712f98","input":"X_train_scaled[0].shape","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"(21,)"},"exec_count":49}},"pos":71,"start":1651474957842,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957921,"exec_count":50,"id":"e381db","input":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error","kernel":"crashcourse","pos":75,"start":1651474957892,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474957994,"exec_count":51,"id":"5d4a97","input":"lin_reg = LinearRegression()\nlin_reg.fit(X_train_scaled, y_train)","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"LinearRegression()"},"exec_count":51}},"pos":76,"start":1651474957991,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474958017,"exec_count":52,"id":"0ca3f7","input":"lin_reg_predicted_values = lin_reg.predict(X_test_scaled)","kernel":"crashcourse","pos":77,"start":1651474958014,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474958042,"exec_count":53,"id":"146ffd","input":"print(\"Linear Regression Baseline Metrics \\n\")\nlin_reg_mse_val = mean_squared_error(y_test, lin_reg_predicted_values)\nprint(\"MSE: \" + str(lin_reg_mse_val) + \"\\n\")\n\nlin_reg_mae_val = mean_absolute_error(y_test, lin_reg_predicted_values)\nprint(\"MAE: \" + str(lin_reg_mae_val) + \"\\n\")\n\nlin_reg_rmse_val = np.sqrt(lin_reg_mse_val)\nprint(\"RMSE: \" + str(lin_reg_rmse_val) + \"\\n\")\n\n\nlin_reg_r2_val = lin_reg.score(X_test_scaled, y_test)\nprint(\"R2: \" + str(lin_reg_r2_val))","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"Linear Regression Baseline Metrics \n\nMSE: 206139836215.55112\n\nMAE: 274031.02772448014\n\nRMSE: 454026.25057979976\n\nR2: 0.6934308880751209\n"}},"pos":78,"start":1651474958040,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474958079,"exec_count":54,"id":"fea19f","input":"from sklearn.ensemble import RandomForestRegressor","kernel":"crashcourse","pos":80,"start":1651474958050,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474959979,"exec_count":55,"id":"403752","input":"rf = RandomForestRegressor()\nrf.fit(X_train_scaled, y_train)","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"RandomForestRegressor()"},"exec_count":55}},"pos":81,"start":1651474958083,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474960048,"exec_count":56,"id":"da1430","input":"rf_predicted_values = rf.predict(X_test_scaled)","kernel":"crashcourse","pos":82,"start":1651474959983,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474960135,"exec_count":57,"id":"7f6864","input":"print(\"Random Forest Regressor Baseline Metrics \\n\")\nrf_mse_val = mean_squared_error(y_test, rf_predicted_values)\nprint(\"MSE: \" + str(rf_mse_val) + \"\\n\")\n\nrf_mae_val = mean_absolute_error(y_test, rf_predicted_values)\nprint(\"MAE: \" + str(rf_mae_val) + \"\\n\")\n\nrf_rmse_val = np.sqrt(rf_mse_val)\nprint(\"RMSE: \" + str(rf_rmse_val) + \"\\n\")\n\n\nrf_r2_val = rf.score(X_test_scaled, y_test)\nprint(\"R2: \" + str(rf_r2_val))","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"Random Forest Regressor Baseline Metrics \n\nMSE: 16823816581.25051\n\nMAE: 65302.9837237193\n\nRMSE: 129706.65588646756\n\nR2: 0.9749797874918854\n"}},"pos":83,"start":1651474960062,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474960145,"exec_count":58,"id":"f91ee5","input":"from sklearn.svm import SVR","kernel":"crashcourse","pos":85,"start":1651474960142,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474963180,"exec_count":59,"id":"56b984","input":"svr = SVR()\nsvr.fit(X_train_scaled, y_train)","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"SVR()"},"exec_count":59}},"pos":86,"start":1651474960150,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474963859,"exec_count":60,"id":"3baabd","input":"svr_predicted_values = svr.predict(X_test_scaled)","kernel":"crashcourse","pos":87,"start":1651474963188,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474964596,"exec_count":61,"id":"157ffd","input":"print(\"Support Vector Regressor Baseline Metrics \\n\")\nsvr_mse_val = mean_squared_error(y_test, svr_predicted_values)\nprint(\"MSE: \" + str(svr_mse_val) + \"\\n\")\n\nsvr_mae_val = mean_absolute_error(y_test, svr_predicted_values)\nprint(\"MAE: \" + str(svr_mae_val) + \"\\n\")\n\nsvr_rmse_val = np.sqrt(svr_mse_val)\nprint(\"RMSE: \" + str(rf_rmse_val) + \"\\n\")\n\nsvr_r2_val = svr.score(X_test_scaled, y_test)\nprint(\"R2: \" + str(svr_r2_val))","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"Support Vector Regressor Baseline Metrics \n\nMSE: 715985123117.9004\n\nMAE: 394511.7686484434\n\nRMSE: 129706.65588646756\n\n"},"1":{"name":"stdout","text":"R2: -0.06480594617412949\n"}},"pos":88,"start":1651474963889,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474964606,"exec_count":62,"id":"a17365","input":"from sklearn.tree import DecisionTreeRegressor","kernel":"crashcourse","pos":90,"start":1651474964601,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474964644,"exec_count":63,"id":"ba75cc","input":"d_tree = DecisionTreeRegressor()\nd_tree.fit(X_train_scaled, y_train)","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"DecisionTreeRegressor()"},"exec_count":63}},"pos":91,"start":1651474964610,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474964660,"exec_count":64,"id":"b26ae3","input":"d_tree_predicted_values = d_tree.predict(X_test_scaled)","kernel":"crashcourse","pos":92,"start":1651474964649,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474964674,"exec_count":65,"id":"720b0f","input":"print(\"Decision Tree Regressor Baseline Metrics \\n\")\nd_tree_mse_val = mean_squared_error(y_test, d_tree_predicted_values)\nprint(\"MSE: \" + str(d_tree_mse_val) + \"\\n\")\n\nd_tree_mae_val = mean_absolute_error(y_test, d_tree_predicted_values)\nprint(\"MAE: \" + str(d_tree_mae_val) + \"\\n\")\n\nd_tree_rmse_val = np.sqrt(d_tree_mse_val)\nprint(\"RMSE: \" + str(d_tree_rmse_val) + \"\\n\")\n\nd_tree_r2_val = d_tree.score(X_test_scaled, y_test)\nprint(\"R2: \" + str(d_tree_r2_val))","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"Decision Tree Regressor Baseline Metrics \n\nMSE: 22448560186.279003\n\nMAE: 74009.29751369575\n\nRMSE: 149828.4358400601\n\nR2: 0.9666147248069824\n"}},"pos":93,"start":1651474964664,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474964683,"exec_count":66,"id":"2e680d","input":"#Fifth Model","kernel":"crashcourse","pos":94,"start":1651474964679,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474964691,"exec_count":67,"id":"85c076","input":"from sklearn.ensemble import GradientBoostingRegressor","kernel":"crashcourse","pos":96,"start":1651474964688,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474965301,"exec_count":68,"id":"39b22b","input":"gbr = GradientBoostingRegressor()\ngbr.fit(X_train_scaled, y_train)","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"GradientBoostingRegressor()"},"exec_count":68}},"pos":97,"start":1651474964697,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474965312,"exec_count":69,"id":"2b105d","input":"gbr_predicted_values = gbr.predict(X_test_scaled)","kernel":"crashcourse","pos":98,"start":1651474965307,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474965332,"exec_count":70,"id":"297f97","input":"print(\"Gradient Boosting Regressor Baseline Metrics \\n\")\ngbr_mse_val = mean_squared_error(y_test, gbr_predicted_values)\nprint(\"MSE: \" + str(gbr_mse_val) + \"\\n\")\n\ngbr_mae_val = mean_absolute_error(y_test, gbr_predicted_values)\nprint(\"MAE: \" + str(gbr_mae_val) + \"\\n\")\n\ngbr_rmse_val = np.sqrt(gbr_mse_val)\nprint(\"RMSE: \" + str(gbr_rmse_val) + \"\\n\")\n\ngbr_r2_val = gbr.score(X_test_scaled, y_test)\nprint(\"R2: \" + str(gbr_r2_val))","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"Gradient Boosting Regressor Baseline Metrics \n\nMSE: 27602789502.533947\n\nMAE: 95326.64814410842\n\nRMSE: 166140.87246229913\n\nR2: 0.9589494062875227\n"}},"pos":99,"start":1651474965321,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474965360,"exec_count":71,"id":"8c5910","input":"from sklearn.ensemble import HistGradientBoostingRegressor","kernel":"crashcourse","pos":101,"start":1651474965338,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474965878,"exec_count":72,"id":"6405f0","input":"hgbr = HistGradientBoostingRegressor()\nhgbr.fit(X_train_scaled, y_train)","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"HistGradientBoostingRegressor()"},"exec_count":72}},"pos":102,"start":1651474965374,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474965917,"exec_count":73,"id":"f3336b","input":"hgbr_predicted_values = hgbr.predict(X_test_scaled)","kernel":"crashcourse","pos":103,"start":1651474965887,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474965956,"exec_count":74,"id":"8717a6","input":"print(\"HistGradient Boosting Regressor Baseline Metrics \\n\")\nhgbr_mse_val = mean_squared_error(y_test, hgbr_predicted_values)\nprint(\"MSE: \" + str(hgbr_mse_val) + \"\\n\")\n\nhgbr_mae_val = mean_absolute_error(y_test, hgbr_predicted_values)\nprint(\"MAE: \" + str(hgbr_mae_val) + \"\\n\")\n\nhgbr_rmse_val = np.sqrt(hgbr_mse_val)\nprint(\"RMSE: \" + str(hgbr_rmse_val) + \"\\n\")\n\nhgbr_r2_val = hgbr.score(X_test_scaled, y_test)\nprint(\"R2: \" + str(hgbr_r2_val))","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"HistGradient Boosting Regressor Baseline Metrics \n\nMSE: 19578300516.55454\n\nMAE: 75543.35293589137\n\nRMSE: 139922.48038308404\n\nR2: 0.9708833464091705\n"}},"pos":104,"scrolled":true,"start":1651474965922,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474966181,"exec_count":75,"id":"f24685","input":"from xgboost import XGBRegressor","kernel":"crashcourse","output":{"0":{"name":"stderr","text":"/projects/df816efc-8285-4471-bb81-0077d1554410/miniconda3/lib/python3.9/site-packages/xgboost/compat.py:36: FutureWarning:\n\npandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n\n"}},"pos":106,"start":1651474965969,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474966870,"exec_count":76,"id":"6d4141","input":"xgb = XGBRegressor()\nxgb.fit(X_train_scaled, y_train)","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, enable_categorical=False,\n             gamma=0, gpu_id=-1, importance_type=None,\n             interaction_constraints='', learning_rate=0.300000012,\n             max_delta_step=0, max_depth=6, min_child_weight=1, missing=nan,\n             monotone_constraints='()', n_estimators=100, n_jobs=2,\n             num_parallel_tree=1, predictor='auto', random_state=0, reg_alpha=0,\n             reg_lambda=1, scale_pos_weight=1, subsample=1, tree_method='exact',\n             validate_parameters=1, verbosity=None)"},"exec_count":76}},"pos":107,"start":1651474966187,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474966886,"exec_count":77,"id":"ada64a","input":"xgb_predicted_values = xgb.predict(X_test_scaled)","kernel":"crashcourse","pos":108,"start":1651474966877,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474966940,"exec_count":78,"id":"0d3221","input":"print(\"XG Boost Regressor Baseline Metrics \\n\")\nxgb_mse_val = mean_squared_error(y_test, xgb_predicted_values)\nprint(\"MSE: \" + str(xgb_mse_val) + \"\\n\")\n\nxgb_mae_val = mean_absolute_error(y_test, xgb_predicted_values)\nprint(\"MAE: \" + str(xgb_mae_val) + \"\\n\")\n\nxgb_rmse_val = np.sqrt(hgbr_mse_val)\nprint(\"RMSE: \" + str(xgb_rmse_val) + \"\\n\")\n\nxgb_r2_val = xgb.score(X_test_scaled, y_test)\nprint(\"R2: \" + str(xgb_r2_val))","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"XG Boost Regressor Baseline Metrics \n\nMSE: 14743714495.209578\n\nMAE: 63795.24258781655\n\nRMSE: 139922.48038308404\n\nR2: 0.9780732946030672\n"}},"pos":109,"start":1651474966894,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474966954,"exec_count":79,"id":"a62ffc","input":"from sklearn import linear_model","kernel":"crashcourse","pos":111,"start":1651474966951,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967192,"exec_count":80,"id":"3a38c3","input":"lasso_reg = linear_model.Lasso()\nlasso_reg.fit(X_train_scaled, y_train)","kernel":"crashcourse","output":{"0":{"name":"stderr","text":"/projects/df816efc-8285-4471-bb81-0077d1554410/miniconda3/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:647: ConvergenceWarning:\n\nObjective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.670e+12, tolerance: 4.169e+11\n\n"},"1":{"data":{"text/plain":"Lasso()"},"exec_count":80}},"pos":112,"scrolled":true,"start":1651474967015,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967206,"exec_count":81,"id":"a1a281","input":"lasso_reg_predicted_values = lasso_reg.predict(X_test_scaled)","kernel":"crashcourse","pos":113,"start":1651474967204,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967228,"exec_count":82,"id":"197725","input":"print(\"Lasso Regressor Baseline Metrics \\n\")\nlasso_reg_mse_val = mean_squared_error(y_test, lasso_reg_predicted_values)\nprint(\"MSE: \" + str(xgb_mse_val) + \"\\n\")\n\nlasso_reg_mae_val = mean_absolute_error(y_test, lasso_reg_predicted_values)\nprint(\"MAE: \" + str(lasso_reg_mae_val) + \"\\n\")\n\nlasso_reg_rmse_val = np.sqrt(lasso_reg_mse_val)\nprint(\"RMSE: \" + str(lasso_reg_rmse_val) + \"\\n\")\n\nlasso_reg_r2_val = lasso_reg.score(X_test_scaled, y_test)\nprint(\"R2: \" + str(lasso_reg_r2_val))","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"Lasso Regressor Baseline Metrics \n\nMSE: 14743714495.209578\n\nMAE: 273227.0843183583\n\nRMSE: 453741.0747579707\n\nR2: 0.6938158818589675\n"}},"pos":114,"start":1651474967214,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967243,"exec_count":83,"id":"438e53","input":"ridge_reg = linear_model.Ridge()\nridge_reg.fit(X_train_scaled, y_train)","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"Ridge()"},"exec_count":83}},"pos":116,"start":1651474967237,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967251,"exec_count":84,"id":"312a13","input":"ridge_reg_predicted_values = ridge_reg.predict(X_test_scaled)","kernel":"crashcourse","pos":117,"start":1651474967247,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967266,"exec_count":85,"id":"bc1609","input":"print(\"Ridge Regressor Baseline Metrics \\n\")\nridge_reg_mse_val = mean_squared_error(y_test, ridge_reg_predicted_values)\nprint(\"MSE: \" + str(ridge_reg_mse_val) + \"\\n\")\n\nridge_reg_mae_val = mean_absolute_error(y_test, ridge_reg_predicted_values)\nprint(\"MAE: \" + str(ridge_reg_mae_val) + \"\\n\")\n\nridge_reg_rmse_val = np.sqrt(ridge_reg_mse_val)\nprint(\"RMSE: \" + str(ridge_reg_rmse_val) + \"\\n\")\n\nridge_reg_r2_val = ridge_reg.score(X_test_scaled, y_test)\nprint(\"R2: \" + str(ridge_reg_r2_val))","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"Ridge Regressor Baseline Metrics \n\nMSE: 205879848510.85532\n\nMAE: 273206.1738867672\n\nRMSE: 453739.8467303211\n\nR2: 0.6938175392008967\n"}},"pos":118,"start":1651474967258,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967277,"exec_count":86,"id":"df8f07","input":"from sklearn.linear_model import ElasticNet","kernel":"crashcourse","pos":120,"start":1651474967276,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967293,"exec_count":87,"id":"e6bb7b","input":"elasticnet_reg = ElasticNet()\nelasticnet_reg.fit(X_train_scaled, y_train)","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"ElasticNet()"},"exec_count":87}},"pos":121,"start":1651474967283,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967303,"exec_count":88,"id":"97083a","input":"elasticnet_reg_predicted_values = elasticnet_reg.predict(X_test_scaled)","kernel":"crashcourse","pos":122,"start":1651474967299,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967334,"exec_count":89,"id":"a372e1","input":"print(\"Elastic Net Regressor Baseline Metrics \\n\")\nelasticnet_reg_mse_val = mean_squared_error(y_test, elasticnet_reg_predicted_values)\nprint(\"MSE: \" + str(elasticnet_reg_mse_val) + \"\\n\")\n\nelasticnet_reg_mae_val = mean_absolute_error(y_test, elasticnet_reg_predicted_values)\nprint(\"MAE: \" + str(elasticnet_reg_mae_val) + \"\\n\")\n\nelasticnet_reg_rmse_val = np.sqrt(elasticnet_reg_mse_val)\nprint(\"RMSE: \" + str(elasticnet_reg_rmse_val) + \"\\n\")\n\nelasticnet_reg_r2_val = elasticnet_reg.score(X_test_scaled, y_test)\nprint(\"R2: \" + str(elasticnet_reg_r2_val))","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"Elastic Net Regressor Baseline Metrics \n\nMSE: 229647608329.2646\n\nMAE: 251282.0410001831\n\nRMSE: 479215.6177852143\n\nR2: 0.6584703634499931\n"}},"pos":123,"start":1651474967309,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967343,"exec_count":90,"id":"e38a5f","input":"from sklearn.neighbors import KNeighborsRegressor","kernel":"crashcourse","pos":125,"start":1651474967339,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967365,"exec_count":91,"id":"2d6d77","input":"knn = KNeighborsRegressor()\nknn.fit(X_train_scaled, y_train)","kernel":"crashcourse","output":{"0":{"data":{"text/plain":"KNeighborsRegressor()"},"exec_count":91}},"pos":126,"start":1651474967363,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967607,"exec_count":92,"id":"13a632","input":"knn_predicted_values = knn.predict(X_test_scaled)","kernel":"crashcourse","pos":127,"start":1651474967370,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967872,"exec_count":93,"id":"d79be1","input":"print(\"K-Nearest Neighbors Baseline Metrics \\n\")\nknn_mse_val = mean_squared_error(y_test, knn_predicted_values)\nprint(\"MSE: \" + str(knn_mse_val) + \"\\n\")\n\nknn_mae_val = mean_absolute_error(y_test, knn_predicted_values)\nprint(\"MAE: \" + str(knn_mae_val) + \"\\n\")\n\nknn_rmse_val = np.sqrt(knn_mse_val)\nprint(\"RMSE: \" + str(knn_rmse_val) + \"\\n\")\n\nknn_r2_val = knn.score(X_test_scaled, y_test)\nprint(\"R2: \" + str(knn_r2_val))","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"K-Nearest Neighbors Baseline Metrics \n\nMSE: 30669299579.40559\n\nMAE: 93584.64715549936\n\nRMSE: 175126.52448845547\n\n"},"1":{"name":"stdout","text":"R2: 0.954388923033853\n"}},"pos":128,"start":1651474967651,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967882,"exec_count":94,"id":"8de256","input":"baseline_r2_error_list = []\nbaseline_models_r2_errors = [lin_reg_r2_val, rf_r2_val, svr_r2_val, d_tree_r2_val, gbr_r2_val, hgbr_r2_val, xgb_r2_val, lasso_reg_r2_val,\n                            ridge_reg_r2_val, elasticnet_reg_r2_val, knn_r2_val]","kernel":"crashcourse","pos":131,"start":1651474967876,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967892,"exec_count":95,"id":"b2f34a","input":"for model in baseline_models_r2_errors:\n    baseline_r2_error_list.append(model)","kernel":"crashcourse","pos":132,"start":1651474967888,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967987,"exec_count":96,"id":"f3ddaf","input":"import plotly.express as px\n\nalgo_name = ['LR', 'RF', 'SVR', 'DTREE', 'GBR', 'HGBR', 'XGB', 'LASSO', 'RIDGE', 'ELASTIC', 'KNN']\n\nfig = px.bar(x = algo_name, y = baseline_r2_error_list, labels={\n                     \"x\": \"Models\",\n                     \"y\": \"R Squared Score\"}, color_discrete_sequence = ['#00CC96'])\n\nfig.update_xaxes(tickangle=90)\n\nfig.update_layout(height=500, width=500, title = \"R Squared Score Comparison of Baseline Models\", title_x = 0.5, xaxis = {'categoryorder':'total descending'})\n\nfig.show()\nfig.write_html(\"bar_graph_r_square_comparison_baseline_models.html\")","kernel":"crashcourse","output":{"0":{"data":{"iframe":"805f6b1ec8f64ddb94fa759895b9d1e1c5956d85"}}},"pos":133,"start":1651474967901,"state":"done","type":"cell"}
{"cell_type":"code","end":1651474967998,"exec_count":97,"id":"1e6b75","input":"from sklearn.model_selection import RandomizedSearchCV\n\nn_estimators = [25, 50, 75, 100]\nmax_depth = np.arange(5,10,1)\nmin_samples_split = [2, 5, 10]\n\nrandom_grid = {'n_estimators': n_estimators,\n              'max_depth': max_depth,\n              'min_samples_split': min_samples_split}","kernel":"crashcourse","pos":137,"start":1651474967994,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475082515,"exec_count":98,"id":"b6a8c1","input":"rf = RandomForestRegressor(random_state = 42)\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 5, verbose=1, random_state=42, n_jobs = -1)\nrf_random.fit(X_train_scaled, y_train)\nrf_random.best_params_","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"Fitting 5 folds for each of 60 candidates, totalling 300 fits\n"},"1":{"name":"stderr","text":"/projects/df816efc-8285-4471-bb81-0077d1554410/miniconda3/lib/python3.9/site-packages/sklearn/model_selection/_search.py:292: UserWarning:\n\nThe total space of parameters 60 is smaller than n_iter=100. Running 60 iterations. For exhaustive searches, use GridSearchCV.\n\n"},"2":{"data":{"text/plain":"{'n_estimators': 100, 'min_samples_split': 2, 'max_depth': 9}"},"exec_count":98}},"pos":138,"start":1651474968005,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475083860,"exec_count":99,"id":"7b2b97","input":"max_depth_list = rf_random.best_params_[\"max_depth\"]\nn_estimators_list = rf_random.best_params_[\"n_estimators\"]\n\nprint(\"\\n----------\\n \")\nrf = RandomForestRegressor(n_estimators=rf_random.best_params_[\"n_estimators\"], max_depth = rf_random.best_params_[\"max_depth\"], min_samples_split = rf_random.best_params_[\"min_samples_split\"])\nrf.fit(X_train_scaled, y_train)\nprint(\"Training set score: {:.2f}\".format(rf.score(X_train_scaled, y_train)))\nprint(\"Test set score: {:.2f}\".format(rf.score(X_test_scaled, y_test)))\n\nprint(\"\\n----------\\n \")\nrf_predicted_values = rf.predict(X_test_scaled)\nrf_mse_val = mean_squared_error(y_test, rf_predicted_values)\nprint(\"MSE : \" + str(rf_mse_val) + \"\\n\")\n\nrf_mae_val = mean_absolute_error(y_test, rf_predicted_values)\nprint(\"MAE : \" + str(rf_mae_val) + \"\\n\")\n\nrf_rmse_val = np.sqrt(rf_mse_val)\nprint(\"RMSE : \" + str(rf_rmse_val) + \"\\n\")\n\nrf_r2_val = rf.score(X_test_scaled, y_test)\nprint(\"R2 Score : \" + str(rf_r2_val) + \"\\n\")\n\nprint(\"\\n----------\\n \")\nprint(\"First 5 actual labels:\")\ndisplay_actual = y_test.head()\ndisplay_labels = display_actual.to_string(index = False)\nprint(display_labels)\n\nprint(\"\\nFirst 5 predicted labels (rounded off):\")\nfor i in range(5):\n    print(round(rf_predicted_values[i]))","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"\n----------\n \n"},"1":{"name":"stdout","text":"Training set score: 0.98\nTest set score: 0.97\n\n----------\n \nMSE : 20313662781.396877\n\nMAE : 78447.36666043979\n\nRMSE : 142526.00738600965\n\nR2 Score : 0.9697897229707583\n\n\n----------\n \nFirst 5 actual labels:\n 240000\n 254999\n5150000\n 700000\n 720000\n\nFirst 5 predicted labels (rounded off):\n415363\n283163\n5155082\n590408\n725910\n"}},"pos":139,"start":1651475082525,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475083880,"exec_count":100,"id":"231b7d","input":"rf_feature_importances = rf.feature_importances_\nX_train_cols = list(X_train.columns)","kernel":"crashcourse","pos":142,"start":1651475083866,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475083891,"exec_count":101,"id":"d7f389","input":"X_train_cols.append('bias')","kernel":"crashcourse","pos":143,"start":1651475083887,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475084001,"exec_count":102,"id":"87cca2","input":"import plotly.express as px\nfig = px.bar(y = rf_feature_importances, x = X_train_cols, color_discrete_sequence = ['#AB63FA'], labels={\n                     \"x\": \"Features\",\n                     \"y\": \"Importance\"})\n\nfig.update_xaxes(tickangle=90)\nfig.update_layout(yaxis=dict(\n        range=[0, 1]\n    ), height=1000, width=1000, title = \"Feature Importance in Random Forest\", title_x = 0.5, xaxis = {'categoryorder':'total descending'})\nfig.show()\nfig.write_html(\"feature_importance_rf.html\")","kernel":"crashcourse","output":{"0":{"data":{"iframe":"c7bce7dcf893ac175cf60492951dd3d553eebdb2"}}},"pos":144,"start":1651475083905,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475084275,"exec_count":103,"id":"a5d7a2","input":"import plotly.express as px\n\nfig = px.scatter(x = y_test, y = rf_predicted_values, log_x = True, log_y = True, trendline = \"ols\", trendline_color_override=\"crimson\", labels={\n                     \"x\": \"Actual Selling Price\",\n                     \"y\": \"Predicted Selling Price \"})\n\n\nfig.layout.height = 1000\nfig.layout.width = 1000\n\nfig.update_layout(title = \"True Selling Price vs Predicted Selling Price for Random Forest\", title_x = 0.5)\nfig.show()\nfig.write_html(\"true_selling_vs_prediction_rf.html\")","kernel":"crashcourse","output":{"0":{"data":{"iframe":"038b14d006654399976f46f0e932439627b0aa8e"}}},"pos":146,"start":1651475084020,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475084293,"exec_count":104,"id":"cc57f4","input":"y = []\nfor i in range(1,1583):\n    y.append(i)","kernel":"crashcourse","pos":148,"start":1651475084291,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475084387,"exec_count":105,"id":"b7243c","input":"fig = px.scatter(y,y_test - rf_predicted_values, color_discrete_sequence = ['#EF553B'], labels={\n                     \"x\": \"Actual Selling Price\",\n                     \"y\": \"Predicted Selling Price \"})\n\nfig.update_layout(\n    title=\"Error\",\n    yaxis_title=\"Index in Test Set\",\n    xaxis_title=\"Error Difference\",\n)\nfig.layout.height = 1000\nfig.layout.width = 1000\nfig.update_layout(xaxis=dict(showgrid=True),\n              yaxis=dict(showgrid=True), title = \"Error in Prediction of Selling Price\", title_x = 0.5\n)\n\nfig.show()\nfig.write_html(\"error_in_selling_price_rf.html\")","kernel":"crashcourse","output":{"0":{"data":{"iframe":"fd0b9bb912d68cb3c7cf9dec7b89dc53c86794b2"}}},"pos":149,"start":1651475084299,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475084398,"exec_count":106,"id":"921a5b","input":"import xgboost\n\nn_estimators_list = [50, 100]\nlearning_rate_list = [0.1, 0.2]\nmax_depth_list = [8, 9]\n\nrandom_grid = {\n    \n    'max_depth': max_depth_list,\n    'max_iter': n_estimators_list,\n    'learning_rate': learning_rate_list \n}","kernel":"crashcourse","pos":153,"start":1651475084394,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475129580,"exec_count":107,"id":"481330","input":"xgb = XGBRegressor(random_state = 120)\nxgb_random = RandomizedSearchCV(estimator = xgb, param_distributions = random_grid, cv = 5, random_state = 120, n_jobs = -1)\nxgb_random.fit(X_train_scaled, y_train)\nxgb_random.best_params_","kernel":"crashcourse","output":{"0":{"name":"stderr","text":"/projects/df816efc-8285-4471-bb81-0077d1554410/miniconda3/lib/python3.9/site-packages/sklearn/model_selection/_search.py:292: UserWarning:\n\nThe total space of parameters 8 is smaller than n_iter=10. Running 8 iterations. For exhaustive searches, use GridSearchCV.\n\n/projects/df816efc-8285-4471-bb81-0077d1554410/miniconda3/lib/python3.9/site-packages/xgboost/compat.py:36: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  from pandas import MultiIndex, Int64Index\n/projects/df816efc-8285-4471-bb81-0077d1554410/miniconda3/lib/python3.9/site-packages/xgboost/compat.py:36: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  from pandas import MultiIndex, Int64Index\n"},"1":{"name":"stdout","text":"[07:05:28] WARNING: ../src/learner.cc:576: \nParameters: { \"max_iter\" } might not be used.\n\n  This could be a false alarm, with some parameters getting used by language bindings but\n  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n  but getting flagged wrongly here. Please open an issue if you find any such cases.\n\n\n"},"2":{"data":{"text/plain":"{'max_iter': 50, 'max_depth': 8, 'learning_rate': 0.2}"},"exec_count":107}},"pos":154,"scrolled":true,"start":1651475084404,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475130228,"exec_count":108,"id":"df0b6d","input":"import pickle\nmax_depth_list = xgb_random.best_params_[\"max_depth\"]\nmax_iter_list = xgb_random.best_params_[\"max_iter\"]\nlearning_rate = xgb_random.best_params_[\"learning_rate\"]\n\nprint(\"\\n----------\\n \")\nxgb = XGBRegressor(n_estimators=xgb_random.best_params_[\"max_iter\"], max_depth = xgb_random.best_params_[\"max_depth\"], learning_rate = xgb_random.best_params_[\"learning_rate\"])\nxgb.fit(X_train_scaled, y_train)\n\nprint(\"Training set score: {:.2f}\".format(rf.score(X_train_scaled, y_train)))\nprint(\"Test set score: {:.2f}\".format(rf.score(X_test_scaled, y_test)))\n\nprint(\"\\n----------\\n \")\nxgb_predicted_values = xgb.predict(X_test_scaled)\nxgb_mse_val = mean_squared_error(y_test, xgb_predicted_values)\nprint(\"MSE : \" + str(xgb_mse_val) + \"\\n\")\n\nxgb_mae_val = mean_absolute_error(y_test, xgb_predicted_values)\nprint(\"MAE : \" + str(xgb_mae_val) + \"\\n\")\n\nxgb_rmse_val = np.sqrt(xgb_mse_val)\nprint(\"RMSE : \" + str(xgb_rmse_val) + \"\\n\")\n\nxgb_r2_val = xgb.score(X_test_scaled, y_test)\nprint(\"R2 Score : \" + str(xgb_r2_val) + \"\\n\")\n\nprint(\"\\n----------\\n \")\nprint(\"First 5 actual labels:\")\ndisplay_actual = y_test.head()\ndisplay_labels = display_actual.to_string(index = False)\nprint(display_labels)\n\nprint(\"\\nFirst 5 predicted labels (rounded off):\")\nfor i in range(5):\n    print(round(xgb_predicted_values[i]))\n    \n# pickle.dump(xgb, open('model.pkl','wb'))","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"\n----------\n \n"},"1":{"name":"stdout","text":"Training set score: 0.98\nTest set score: 0.97\n\n----------\n \nMSE : 15737985912.555859\n\nMAE : 65965.98806890013\n\nRMSE : 125451.12957863655\n\nR2 Score : 0.97659462405096\n\n\n----------\n \nFirst 5 actual labels:\n 240000\n 254999\n5150000\n 700000\n 720000\n\nFirst 5 predicted labels (rounded off):\n324252\n291879\n5153019\n662526\n699137\n"}},"pos":155,"start":1651475129601,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475130359,"exec_count":109,"id":"3ae5a3","input":"xgb_feature_importances = xgb.feature_importances_\nX_train_cols = list(X_train.columns)\n\nX_train_cols.append('bias')\n\nimport plotly.express as px\nfig = px.bar(y = xgb_feature_importances, x = X_train_cols, color_discrete_sequence = ['#AB63FA'], labels={\n                     \"x\": \"Features\",\n                     \"y\": \"Importance\"})\n\nfig.update_xaxes(tickangle=90)\nfig.update_layout(yaxis=dict(\n        range=[0, 1]\n    ), height=1000, width=1000, title = \"Feature Importance in XGBoost Regressor\", title_x = 0.5, xaxis = {'categoryorder':'total descending'})\nfig.show()\nfig.write_html(\"feature_importance_xgboost.html\")","kernel":"crashcourse","output":{"0":{"data":{"iframe":"7e0bd8db7c33e9d91628514831e75ef4dec3c33c"}}},"pos":156,"start":1651475130295,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475130494,"exec_count":110,"id":"f31074","input":"import plotly.express as px\n\nfig = px.scatter(x = y_test, y = xgb_predicted_values, log_x = True, log_y = True, trendline = \"ols\", trendline_color_override=\"crimson\", labels={\n                     \"x\": \"Actual Selling Price\",\n                     \"y\": \"Predicted Selling Price \"})\n\n\nfig.layout.height = 1000\nfig.layout.width = 1000\n\nfig.update_layout(title = \"True Selling Price vs Predicted Selling Price for XG Boost\", title_x = 0.5)\nfig.show()\nfig.write_html(\"true_selling_price_vs_prediction_xgboost.html\")","kernel":"crashcourse","output":{"0":{"data":{"iframe":"bb44802aa1867032bbc3662e1acee0053ed988e2"}}},"pos":157,"start":1651475130368,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475130590,"exec_count":111,"id":"c1c466","input":"fig = px.scatter(y,y_test - xgb_predicted_values, color_discrete_sequence = ['#EF553B'], labels={\n                     \"x\": \"Actual Selling Price\",\n                     \"y\": \"Predicted Selling Price \"})\n\nfig.update_layout(\n    title=\"Error\",\n    yaxis_title=\"Index in Test Set\",\n    xaxis_title=\"Error Difference\",\n)\nfig.layout.height = 1000\nfig.layout.width = 1000\nfig.update_layout(xaxis=dict(showgrid=True),\n              yaxis=dict(showgrid=True), title = \"Error in Prediction of Selling Price of XG Boost\", title_x = 0.5\n)\n\nfig.show()\nfig.write_html(\"error_in_selling_price_xgboost.html\")","kernel":"crashcourse","output":{"0":{"data":{"iframe":"fef017f76e9e37c6650151fbb0c4d7b9851505f7"}}},"pos":158,"start":1651475130511,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475130600,"exec_count":112,"id":"ece0b7","input":"from sklearn.neighbors import KNeighborsRegressor\n","kernel":"crashcourse","pos":161,"start":1651475130594,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475130613,"exec_count":113,"id":"e0b6ba","input":"knn = KNeighborsRegressor(n_neighbors = 5).fit(X_train_scaled, y_train)","kernel":"crashcourse","pos":162,"start":1651475130607,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475132475,"exec_count":114,"id":"a09d8c","input":"print(\"\\n ----XXXXXXX------\\n \")\n\n\nprint(\"Training set score: {:.2f}\".format(knn.score(X_train_scaled, y_train)))\nprint(\"Test set score: {:.2f}\".format(knn.score(X_test_scaled, y_test)))\n\nprint(\"\\n ----XXXXXXX------\\n \")\nknn_predicted_values = knn.predict(X_test_scaled)\nknn_mse_val = mean_squared_error(y_test, knn_predicted_values)\nprint(\"MSE : \" + str(knn_mse_val) + \"\\n\")\n\nknn_mae_val = mean_absolute_error(y_test, knn_predicted_values)\nprint(\"MAE : \" + str(knn_mae_val) + \"\\n\")\n\nknn_rmse_val = np.sqrt(knn_mse_val)\nprint(\"RMSE : \" + str(knn_rmse_val) + \"\\n\")\n\nknn_r2_val = knn.score(X_test_scaled, y_test)\nprint(\"R2 Score : \" + str(knn_r2_val) + \"\\n\")\n\nprint(\"\\n ----XXXXXXX------\\n \")\nprint(\"First 5 actual labels:\")\ndisplay_actual = y_test.head()\ndisplay_labels = display_actual.to_string(index = False)\nprint(display_labels)\n\nprint(\"\\nFirst 5 predicted labels (rounded off):\")\nfor i in range(5):\n    print(round(knn_predicted_values[i]))","kernel":"crashcourse","output":{"0":{"name":"stdout","text":"\n ----XXXXXXX------\n \n"},"1":{"name":"stdout","text":"Training set score: 0.96\n"},"2":{"name":"stdout","text":"Test set score: 0.95\n\n ----XXXXXXX------\n \n"},"3":{"name":"stdout","text":"MSE : 30669299579.40559\n\nMAE : 93584.64715549936\n\nRMSE : 175126.52448845547\n\n"},"4":{"name":"stdout","text":"R2 Score : 0.954388923033853\n\n\n ----XXXXXXX------\n \nFirst 5 actual labels:\n 240000\n 254999\n5150000\n 700000\n 720000\n\nFirst 5 predicted labels (rounded off):\n343000\n232000\n5150000\n636000\n560000\n"}},"pos":163,"start":1651475130661,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475132577,"exec_count":115,"id":"3b9fef","input":"import plotly.express as px\n\nfig = px.scatter(x = y_test, y =knn_predicted_values, log_x = True, log_y = True, trendline = \"ols\", trendline_color_override=\"crimson\", labels={\n                     \"x\": \"Actual Selling Price\",\n                     \"y\": \"Predicted Selling Price \"})\n\n\nfig.layout.height = 1000\nfig.layout.width = 1000\n\nfig.update_layout(title = \"True Selling Price vs Predicted Selling Price of KNN\", title_x = 0.5)\nfig.show()\nfig.write_html(\"true_selling_price_vs_prediction_knn.html\")","kernel":"crashcourse","output":{"0":{"data":{"iframe":"7f9e014b5dd68efc7e44289b1c2466f7a30fdfc4"}}},"pos":164,"start":1651475132489,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475132655,"exec_count":116,"id":"5caa0f","input":"fig = px.scatter(y,y_test - knn_predicted_values, color_discrete_sequence = ['#EF553B'], labels={\n                     \"x\": \"Actual Selling Price\",\n                     \"y\": \"Predicted Selling Price \"})\n\nfig.update_layout(\n    title=\"Error\",\n    yaxis_title=\"Index in Test Set\",\n    xaxis_title=\"Error Difference\",\n)\nfig.layout.height = 1000\nfig.layout.width = 1000\nfig.update_layout(xaxis=dict(showgrid=True),\n              yaxis=dict(showgrid=True), title = \"Error in Prediction of Selling Price of KNN\", title_x = 0.5\n)\n\nfig.show()\nfig.write_html(\"error_in_selling_price_knn.html\")","kernel":"crashcourse","output":{"0":{"data":{"iframe":"8bf0907ce9bc4ed279fa62f632b9f5a953071ecd"}}},"pos":165,"start":1651475132593,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475132665,"exec_count":117,"id":"d2ea81","input":"errors_mse = []\nerrors_mae = []\nerrors_rmse = []\nerrors_r2 = []","kernel":"crashcourse","pos":168,"start":1651475132659,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475132685,"exec_count":118,"id":"8a659a","input":"mse = [rf_mse_val, xgb_mse_val, knn_mse_val]\nfor model in mse:\n    errors_mse.append(model)\n \nmae = [rf_mae_val, xgb_mae_val, knn_mae_val]\nfor model in mae:\n    errors_mae.append(model)\n    \nrmse = [rf_rmse_val, xgb_rmse_val, knn_rmse_val]\nfor model in rmse:\n    errors_rmse.append(model)\n    \n\nr2 = [rf_r2_val, xgb_r2_val, knn_r2_val]\nfor model in r2:\n    errors_r2.append(model)","kernel":"crashcourse","pos":169,"start":1651475132672,"state":"done","type":"cell"}
{"cell_type":"code","end":1651475132754,"exec_count":119,"id":"4fce94","input":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nfig = make_subplots(rows=2, cols=2)\n\nrow_name = ['MSE', 'MAE', 'RMSE', 'R2']\n\nrow_name_full = ['Mean Square Error', 'Mean Absolute Error', 'Root Mean Square Error', 'R Squared']\n\nalgo_name = ['RF', 'XGB', 'KNN']\n\nmodel_name = [errors_mse, errors_mae, errors_rmse, errors_r2]\n\nfor i in range(4):\n  row = rows[i]\n  fig.add_trace(\n      go.Bar(y = model_name[i], x = algo_name, name = row_name_full[i]), row = math.floor(i/2) + 1, col = i%2 + 1)\n  fig['layout']['yaxis' + str(i+1)]['title']= row_name[i]\n\nfig.update_layout(height=1000, width=1000, title = \"Metric Comparison of Top 3 Algorithms\", title_x = 0.5)\n\nfig.show()\nfig.write_html(\"comparison_top_3_algos.html\")","kernel":"crashcourse","output":{"0":{"data":{"iframe":"11f0303b4a0b5bc57da88eced19721547e0b290f"}}},"pos":170,"start":1651475132699,"state":"done","type":"cell"}
{"cell_type":"code","id":"f321d1","input":"","pos":174,"type":"cell"}
{"cell_type":"markdown","id":"015a3d","input":"### Cleaning and Fixing Data Part 1\n\n","pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0a04f4","input":"##### Decision Tree Regressor\n\n","pos":89,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"24c967","input":"### Scaling Data\n\n","pos":64,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"25307a","input":"### Comparing and Choosing Top 3 Baseline Models\n\n","pos":129,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2c1a13","input":"### Encoding Categorical Features\n\n","pos":57,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2d6e3c","input":"### Describing Dataset\n\n","pos":27,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2f5a00","input":"##### Linear Regression\n\n","pos":74,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"317fef","input":"##### Random Forest\n\n","pos":135,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"39e27b","input":"##### Random Forest\n\n","pos":79,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3a5d29","input":"### Train\\-test Split\n\n","pos":61,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"421b0e","input":"TODO:\n","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4444e1","input":"##### Elastic Net Regressor\n\n","pos":119,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4e93ae","input":"### Improving Top 3 Baseline Models\n\n","pos":134,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5c6d83","input":"##### Lasso Regression\n\n","pos":110,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"617c0e","input":"##### XG Boost Regressor\n\n","pos":105,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"64738d","input":"### Cleaning and Fixing Data Part 2\n\n","pos":53,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"657eb6","input":"##### K\\-Nearest Neighbors\n\n","pos":159,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"659918","input":"##### XG Boost Regressor\n\n","pos":151,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"661c4b","input":"##### HistGradient Boosting Regressor\n\n","pos":100,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7c2bfc","input":"### Comparing Top 3 Models & Choosing the Best\n\n","pos":166,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"90c08a","input":"##### K\\-Nearest Neighbors\n\n","pos":124,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"974635","input":"##### Gradient Boosting Regressor\n\n","pos":95,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a78a83","input":"##### Post\\-Training Visualizations\n\n","pos":140,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b1cacc","input":"### Data Modeling: Baseline Models\n\n","pos":72,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"cd60b8","input":"### Checking Null Values\n\n","pos":6,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e5692c","input":"##### Support Vector Regressor\n\n","pos":84,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ecc183","input":"##### Ridge Regression\n\n","pos":115,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"efbd59","input":"### Visualizing Dataset\n\n","pos":32,"state":"done","type":"cell"}
{"id":0,"time":1651470036141,"type":"user"}
{"last_load":1651461799460,"type":"file"}